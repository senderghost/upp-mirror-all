namespace Upp {
	struct Foo {};
	struct String {
		Foo Bar();
		Foo bar;
	};

	template <class T>
	class One {
		T *operator->();
	};
	
	template <class T>
	T& Single() {}

	template <class T>
	struct Array {
		T&  operator[](int i);
		Foo operator()(int i);
	};
};


using namespace Upp;

class ResourceCache {
public:
	ValueMap GetAttrs();

	static ResourceCache& The();
};

void Expressions()
{
	String str1;
	Upp::String str2;

	auto s1 = str1;
	auto s2 = str2;

	auto one = One<String>();
	auto one1 = One<String>()->Bar();
	auto one2 = One<String>()->bar;

	auto single = Single<String>();
	auto single1 = Single<String>().Bar();
	auto single2 = Single<String>().bar;

	Array<String> a;
	auto a1 = a[0];
	auto a2 = a[0].bar;
	auto a3 = a(0);

	auto th = ResourceCache::The();