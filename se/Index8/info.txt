Mingw

TIMING Old string find: 928.32 ms - 18.57 us (929.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old string add :  1.63 s  - 32.53 us ( 1.63 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New string find: 866.32 ms - 17.33 us (867.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New string add :  1.28 s  - 25.53 us ( 1.28 s  / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING Old int find   : 324.32 ms -  6.49 us (325.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING Old int add    :  1.20 s  - 24.05 us ( 1.20 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New int find   : 340.32 ms -  6.81 us (341.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING New int add    : 798.32 ms - 15.97 us (799.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000





TIMING Old string find: 988.15 ms - 19.76 us (989.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old string add :  2.20 s  - 44.08 us ( 2.21 s  / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING New string find: 906.15 ms - 18.12 us (907.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New string add :  1.55 s  - 30.98 us ( 1.55 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old int find   : 299.15 ms -  5.98 us (300.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING Old int add    :  1.50 s  - 29.94 us ( 1.50 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New int find   : 294.15 ms -  5.88 us (295.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING New int add    : 764.15 ms - 15.28 us (765.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000

TIMING Old string find: 991.30 ms - 19.83 us (992.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old string add :  2.22 s  - 44.45 us ( 2.22 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New string find: 826.30 ms - 16.53 us (827.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING New string add :  1.52 s  - 30.45 us ( 1.52 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old int find   : 323.30 ms -  6.47 us (324.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING Old int add    :  1.56 s  - 31.17 us ( 1.56 s  / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000
TIMING New int find   : 358.30 ms -  7.17 us (359.00 ms / 50000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 50000
TIMING New int add    : 803.30 ms - 16.07 us (804.00 ms / 50000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 50000





MINGW+TLS
TIMING Old string find: 698.74 ms -  6.99 us (700.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING Old string add :  1.62 s  - 16.16 us ( 1.62 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New string find: 596.74 ms -  5.97 us (598.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING New string add :  1.35 s  - 13.55 us ( 1.36 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING Old int find   : 213.74 ms -  2.14 us (215.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING Old int add    :  1.11 s  - 11.15 us ( 1.12 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New int find   : 241.74 ms -  2.42 us (243.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING New int add    : 850.74 ms -  8.51 us (852.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000

MINGW-TLS
TIMING Old string find: 735.72 ms -  7.36 us (737.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING Old string add :  1.83 s  - 18.34 us ( 1.83 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New string find: 588.72 ms -  5.89 us (590.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING New string add :  1.28 s  - 12.77 us ( 1.28 s  / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING Old int find   : 226.72 ms -  2.27 us (228.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING Old int add    :  1.35 s  - 13.55 us ( 1.36 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New int find   : 229.72 ms -  2.30 us (231.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New int add    : 852.72 ms -  8.53 us (854.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000

MSC64
TIMING Old string find: 938.61 ms -  9.39 us (940.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING Old string add :  2.33 s  - 23.32 us ( 2.33 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New string find: 748.61 ms -  7.49 us (750.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New string add :  1.51 s  - 15.11 us ( 1.51 s  / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING Old int find   : 201.61 ms -  2.02 us (203.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING Old int add    :  1.39 s  - 13.94 us ( 1.40 s  / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000
TIMING New int find   : 276.61 ms -  2.77 us (278.00 ms / 100000 ), min:  0.00 ns, max:  2.00 ms, nesting: 0 - 100000
TIMING New int add    : 782.61 ms -  7.83 us (784.00 ms / 100000 ), min:  0.00 ns, max:  1.00 ms, nesting: 0 - 100000


New int find
400315B0  mov ecx,edi
400315B2  bswap ecx
400315B4  or ecx,0x80000000
400315BA  and ecx,ebp
400315BC  mov ecx,DWORD PTR [rdx+rcx*8]
400315BF  test ecx,ecx
400315C1  jns 0x1400315cd <Benchmark()+1101>
400315C3  jmp 0x1400315e6 <Benchmark()+1126>
400315C5  mov ecx,DWORD PTR [r9+0x4]
400315C9  test ecx,ecx
400315CB  js 0x1400315e6 <Benchmark()+1126>
400315CD  movsxd r8,ecx
400315D0  cmp DWORD PTR [r11+r8*4],r10d
400315D4  lea r9,[rsi+r8*8]
400315D8  jne 0x1400315c5 <Benchmark()+1093>
400315DA  cmp ecx,r10d
400315DD  jne 0x1400315e6 <Benchmark()+1126>
400315DF  add DWORD PTR [rip+0x184e3a],0x1        # 0x1401b6420
400315E6  add r10d,0x1
400315EA  sub edi,0x5c9ec3ea
400315F0  cmp r10d,0x1388
400315F7  jne 0x1400315b0 <Benchmark()+1072>

Old int find
40031EA4  mov edx,ebp
40031EA6  bswap edx
40031EA8  and edx,r12d
40031EAB  mov r9d,DWORD PTR [r13+rdx*4+0x0]
40031EB0  test r9d,r9d
40031EB3  js 0x140031edd <Benchmark()+3421>
40031EB5  mov edx,r9d
40031EB8  jmp 0x140031ec8 <Benchmark()+3400>
40031EBA  nop WORD PTR [rax+rax*1+0x0]
40031EC0  mov edx,DWORD PTR [rdi+rcx*8]
40031EC3  cmp r9d,edx
40031EC6  je 0x140031edd <Benchmark()+3421>
40031EC8  movsxd rcx,edx
40031ECB  cmp DWORD PTR [rsi+rcx*4],r10d
40031ECF  jne 0x140031ec0 <Benchmark()+3392>
40031ED1  cmp edx,r10d
40031ED4  jne 0x140031edd <Benchmark()+3421>
40031ED6  add DWORD PTR [rip+0x184543],0x1        # 0x1401b6420
40031EDD  add r10d,0x1
40031EE1  sub ebp,0x5c9ec3ea
40031EE7  cmp r10d,0x1388
40031EEE  jne 0x140031ea4 <Benchmark()+3364>



40031180  push r15
40031182  push r14
40031184  push r13
40031186  push r12
40031188  push rbp
40031189  push rdi
4003118A  push rsi
4003118B  push rbx
4003118C  sub rsp,0x178
40031193  movaps XMMWORD PTR [rsp+0x160],xmm6
4003119B  xor ebx,ebx
4003119D  pxor xmm6,xmm6
400311A1  lea rax,[rsp+0x110]
400311A9  mov QWORD PTR [rsp+0x100],0x0
400311B5  mov QWORD PTR [rsp+0x20],rax
400311BA  lea rax,[rsp+0x100]
400311C2  mov QWORD PTR [rsp+0x108],0x0
400311CE  mov QWORD PTR [rsp+0x48],rax
400311D3  mov rcx,QWORD PTR [rsp+0x20]
400311D8  mov edx,ebx
400311DA  call 0x140071600 <Upp::FormatInteger(int)>
400311DF  movsxd rax,DWORD PTR [rsp+0x108]
400311E7  cmp eax,DWORD PTR [rsp+0x10c]
400311EE  mov rsi,QWORD PTR [rsp+0x100]
400311F6  jge 0x140033ec4 <Benchmark()+11588>
400311FC  lea edx,[rax+0x1]
400311FF  shl rax,0x4
40031203  mov DWORD PTR [rsp+0x108],edx
4003120A  mov edx,DWORD PTR [rsp+0x110]
40031211  add rax,rsi
40031214  mov DWORD PTR [rax],edx
40031216  mov edx,DWORD PTR [rsp+0x114]
4003121D  mov DWORD PTR [rax+0x4],edx
40031220  mov edx,DWORD PTR [rsp+0x118]
40031227  mov DWORD PTR [rax+0x8],edx
4003122A  mov edx,DWORD PTR [rsp+0x11c]
40031231  mov DWORD PTR [rax+0xc],edx
40031234  add ebx,0x1
40031237  cmp ebx,0x1388
4003123D  jne 0x1400311d3 <Benchmark()+83>
4003123F  mov DWORD PTR [rsp+0x44],0x4e20
40031247  mov rcx,QWORD PTR [rsp+0x20]
4003124C  call 0x140035f10 <New::HashBase::HashBase()>
40031251  mov QWORD PTR [rsp+0x130],0x0
4003125D  mov QWORD PTR [rsp+0x138],0x0
40031269  movzx eax,BYTE PTR [rip+0x185730]        # 0x1401b69a0
40031270  test al,al
40031272  jne 0x140031288 <Benchmark()+264>
40031274  lea rcx,[rip+0x185725]        # 0x1401b69a0
4003127B  call 0x140157920 <__cxa_guard_acquire>
40031280  test eax,eax
40031282  jne 0x140033f90 <Benchmark()+11792>
40031288  lea rcx,[rip+0x171d91]        # 0x1401a3020 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting20>
4003128F  call 0x140002b00 <__emutls_get_address>
40031294  mov r15,rax
40031297  call QWORD PTR [rip+0x15996b]        # 0x14018ac08 <__imp_timeGetTime>
4003129D  add DWORD PTR [r15],0x1
400312A1  mov DWORD PTR [rsp+0x30],eax
400312A5  lea rax,[rsp+0x60]
400312AA  xor ebp,ebp
400312AC  xor edi,edi
400312AE  mov QWORD PTR [rsp+0x28],rax
400312B3  jmp 0x14003134f <Benchmark()+463>
400312B8  nop DWORD PTR [rax+rax*1+0x0]
400312C0  lea edx,[rax+0x1]
400312C3  mov DWORD PTR [rsp+0x138],edx
400312CA  mov DWORD PTR [rsi+rax*4],edi
400312CD  mov esi,DWORD PTR [rsp+0x120]
400312D4  mov ebx,ebp
400312D6  mov edx,DWORD PTR [rsp+0x124]
400312DD  bswap ebx
400312DF  or ebx,0x80000000
400312E5  mov r12,QWORD PTR [rsp+0x118]
400312ED  movsxd rax,esi
400312F0  cmp esi,edx
400312F2  jge 0x140031430 <Benchmark()+688>
400312F8  lea edx,[rax+0x1]
400312FB  lea rax,[r12+rax*8]
400312FF  mov DWORD PTR [rsp+0x120],edx
40031306  mov DWORD PTR [rax],ebx
40031308  mov DWORD PTR [rax+0x4],0xffffffff
4003130F  mov eax,DWORD PTR [rsp+0x128]
40031316  cmp esi,eax
40031318  jge 0x140031420 <Benchmark()+672>
4003131E  and ebx,eax
40031320  mov rax,QWORD PTR [rsp+0x110]
40031328  lea rax,[rax+rbx*8]
4003132C  cmp DWORD PTR [rax],0xffffffff
4003132F  jne 0x1400314d0 <Benchmark()+848>
40031335  mov DWORD PTR [rax+0x4],esi
40031338  mov DWORD PTR [rax],esi
4003133A  add edi,0x1
4003133D  sub ebp,0x5c9ec3ea
40031343  cmp edi,0x1388
40031349  je 0x140031536 <Benchmark()+950>
4003134F  movsxd rax,DWORD PTR [rsp+0x138]
40031357  mov edx,DWORD PTR [rsp+0x13c]
4003135E  mov rsi,QWORD PTR [rsp+0x130]
40031366  cmp eax,edx
40031368  jl 0x1400312c0 <Benchmark()+320>
4003136E  cmp edx,0x7fffffff
40031374  je 0x140033e8e <Benchmark()+11534>
4003137A  cmp edx,0x55555553
40031380  jg 0x140031510 <Benchmark()+912>
40031386  mov ebx,edx
40031388  sar ebx,1
4003138A  add ebx,edx
4003138C  add edx,0x1
4003138F  cmp ebx,edx
40031391  cmovl ebx,edx
40031394  xor eax,eax
40031396  xor r9d,r9d
40031399  movsxd r12,ebx
4003139C  shl r12,0x2
400313A0  test ebx,ebx
400313A2  mov QWORD PTR [rsp+0x60],r12
400313A7  jne 0x140034256 <Benchmark()+12502>
400313AD  add ebx,eax
400313AF  movsxd r8,DWORD PTR [rsp+0x138]
400313B7  mov DWORD PTR [rsp+0x13c],ebx
400313BE  mov rdx,QWORD PTR [rsp+0x130]
400313C6  mov rax,r8
400313C9  shl r8,0x2
400313CD  test rdx,rdx
400313D0  je 0x1400313ec <Benchmark()+620>
400313D2  mov rcx,r9
400313D5  call 0x140002d78 <memcpy>
400313DA  movsxd r8,DWORD PTR [rsp+0x138]
400313E2  mov r9,rax
400313E5  mov rax,r8
400313E8  shl r8,0x2
400313EC  add eax,0x1
400313EF  test rsi,rsi
400313F2  mov QWORD PTR [rsp+0x130],r9
400313FA  mov DWORD PTR [rsp+0x138],eax
40031401  mov DWORD PTR [r9+r8*1],edi
40031405  je 0x1400312cd <Benchmark()+333>
4003140B  mov rcx,rsi
4003140E  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031413  jmp 0x1400312cd <Benchmark()+333>
40031418  nop DWORD PTR [rax+rax*1+0x0]
40031420  mov rcx,QWORD PTR [rsp+0x20]
40031425  call 0x140035a90 <New::HashBase::GrowMap()>
4003142A  jmp 0x14003133a <Benchmark()+442>
4003142F  nop 
40031430  cmp edx,0x7fffffff
40031436  je 0x140033e76 <Benchmark()+11510>
4003143C  cmp edx,0x55555553
40031442  jg 0x1400314e1 <Benchmark()+865>
40031448  mov r13d,edx
4003144B  sar r13d,1
4003144E  add r13d,edx
40031451  add edx,0x1
40031454  cmp r13d,edx
40031457  cmovl r13d,edx
4003145B  xor eax,eax
4003145D  xor r9d,r9d
40031460  movsxd r14,r13d
40031463  shl r14,0x3
40031467  test r13d,r13d
4003146A  mov QWORD PTR [rsp+0x68],r14
4003146F  jne 0x140033ea6 <Benchmark()+11558>
40031475  add r13d,eax
40031478  mov rdx,QWORD PTR [rsp+0x118]
40031480  mov DWORD PTR [rsp+0x124],r13d
40031488  test rdx,rdx
4003148B  je 0x1400314a4 <Benchmark()+804>
4003148D  movsxd r8,DWORD PTR [rsp+0x120]
40031495  mov rcx,r9
40031498  shl r8,0x3
4003149C  call 0x140002d78 <memcpy>
400314A1  mov r9,rax
400314A4  mov rcx,r12
400314A7  mov QWORD PTR [rsp+0x118],r9
400314AF  call 0x14003fa40 <Upp::MemoryFree(void*)>
400314B4  mov r12,QWORD PTR [rsp+0x118]
400314BC  movsxd rax,DWORD PTR [rsp+0x120]
400314C4  jmp 0x1400312f8 <Benchmark()+376>
400314C9  nop DWORD PTR [rax+0x0]
400314D0  movsxd rdx,DWORD PTR [rax+0x4]
400314D4  mov DWORD PTR [r12+rdx*8+0x4],esi
400314D9  mov DWORD PTR [rax+0x4],esi
400314DC  jmp 0x14003133a <Benchmark()+442>
400314E1  movabs rax,0x3fffffff8
400314EB  lea rcx,[rsp+0x68]
400314F0  mov QWORD PTR [rsp+0x68],rax
400314F5  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
400314FA  mov r9,rax
400314FD  mov r13d,0x7fffffff
40031503  jmp 0x140031478 <Benchmark()+760>
40031508  nop DWORD PTR [rax+rax*1+0x0]
40031510  movabs rax,0x1fffffffc
4003151A  mov rcx,QWORD PTR [rsp+0x28]
4003151F  mov QWORD PTR [rsp+0x60],rax
40031524  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031529  mov r9,rax
4003152C  mov ebx,0x7fffffff
40031531  jmp 0x1400313af <Benchmark()+559>
40031536  mov eax,DWORD PTR [r15]
40031539  lea rcx,[rip+0x185480]        # 0x1401b69c0
40031540  mov edx,DWORD PTR [rsp+0x30]
40031544  lea r8d,[rax-0x1]
40031548  mov DWORD PTR [r15],r8d
4003154B  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40031550  movzx eax,BYTE PTR [rip+0x1853c9]        # 0x1401b6920
40031557  test al,al
40031559  jne 0x14003156f <Benchmark()+1007>
4003155B  lea rcx,[rip+0x1853be]        # 0x1401b6920
40031562  call 0x140157920 <__cxa_guard_acquire>
40031567  test eax,eax
40031569  jne 0x140033f60 <Benchmark()+11744>
4003156F  lea rcx,[rip+0x171aca]        # 0x1401a3040 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting26>
40031576  call 0x140002b00 <__emutls_get_address>
4003157B  mov rbx,rax
4003157E  call QWORD PTR [rip+0x159684]        # 0x14018ac08 <__imp_timeGetTime>
40031584  add DWORD PTR [rbx],0x1
40031587  xor edi,edi
40031589  xor r10d,r10d
4003158C  mov rdx,QWORD PTR [rsp+0x110]
40031594  mov ebp,DWORD PTR [rsp+0x128]
4003159B  mov rsi,QWORD PTR [rsp+0x118]
400315A3  mov r11,QWORD PTR [rsp+0x130]
400315AB  nop DWORD PTR [rax+rax*1+0x0]
400315B0  mov ecx,edi
400315B2  bswap ecx
400315B4  or ecx,0x80000000
400315BA  and ecx,ebp
400315BC  mov ecx,DWORD PTR [rdx+rcx*8]
400315BF  test ecx,ecx
400315C1  jns 0x1400315cd <Benchmark()+1101>
400315C3  jmp 0x1400315e6 <Benchmark()+1126>
400315C5  mov ecx,DWORD PTR [r9+0x4]
400315C9  test ecx,ecx
400315CB  js 0x1400315e6 <Benchmark()+1126>
400315CD  movsxd r8,ecx
400315D0  cmp DWORD PTR [r11+r8*4],r10d
400315D4  lea r9,[rsi+r8*8]
400315D8  jne 0x1400315c5 <Benchmark()+1093>
400315DA  cmp ecx,r10d
400315DD  jne 0x1400315e6 <Benchmark()+1126>
400315DF  add DWORD PTR [rip+0x184e3a],0x1        # 0x1401b6420
400315E6  add r10d,0x1
400315EA  sub edi,0x5c9ec3ea
400315F0  cmp r10d,0x1388
400315F7  jne 0x1400315b0 <Benchmark()+1072>
400315F9  mov edi,DWORD PTR [rbx]
400315FB  lea rcx,[rip+0x18533e]        # 0x1401b6940
40031602  mov edx,eax
40031604  lea r8d,[rdi-0x1]
40031608  mov DWORD PTR [rbx],r8d
4003160B  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40031610  movzx eax,BYTE PTR [rip+0x185289]        # 0x1401b68a0
40031617  test al,al
40031619  jne 0x14003162f <Benchmark()+1199>
4003161B  lea rcx,[rip+0x18527e]        # 0x1401b68a0
40031622  call 0x140157920 <__cxa_guard_acquire>
40031627  test eax,eax
40031629  jne 0x140033ff0 <Benchmark()+11888>
4003162F  lea rcx,[rip+0x171a2a]        # 0x1401a3060 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting33>
40031636  call 0x140002b00 <__emutls_get_address>
4003163B  mov rdi,rax
4003163E  mov QWORD PTR [rsp+0x38],rax
40031643  call QWORD PTR [rip+0x1595bf]        # 0x14018ac08 <__imp_timeGetTime>
40031649  mov rcx,QWORD PTR [rsp+0x130]
40031651  mov DWORD PTR [rsp+0x40],eax
40031655  add DWORD PTR [rdi],0x1
40031658  test rcx,rcx
4003165B  je 0x140031662 <Benchmark()+1250>
4003165D  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031662  mov rcx,QWORD PTR [rsp+0x20]
40031667  mov QWORD PTR [rsp+0x130],0x0
40031673  mov QWORD PTR [rsp+0x138],0x0
4003167F  call 0x140035880 <New::HashBase::Clear()>
40031684  lea rax,[rsp+0x88]
4003168C  xor esi,esi
4003168E  mov QWORD PTR [rsp+0x28],rax
40031693  mov edi,esi
40031695  mov r13,QWORD PTR [rsp+0x118]
4003169D  sar edi,0x2
400316A0  mov r12,QWORD PTR [rsp+0x130]
400316A8  imul eax,edi,0xa3613c16
400316AE  bswap eax
400316B0  or eax,0x80000000
400316B5  mov edx,eax
400316B7  mov r15d,eax
400316BA  and edx,DWORD PTR [rsp+0x128]
400316C1  mov rax,QWORD PTR [rsp+0x110]
400316C9  lea rbp,[rax+rdx*8]
400316CD  mov ebx,DWORD PTR [rbp+0x0]
400316D0  test ebx,ebx
400316D2  jns 0x1400316eb <Benchmark()+1387>
400316D4  jmp 0x140031980 <Benchmark()+2048>
400316D9  nop DWORD PTR [rax+0x0]
400316E0  mov ebx,DWORD PTR [rdx+0x4]
400316E3  test ebx,ebx
400316E5  js 0x1400318d0 <Benchmark()+1872>
400316EB  movsxd rax,ebx
400316EE  cmp edi,DWORD PTR [r12+rax*4]
400316F2  lea rdx,[r13+rax*8+0x0]
400316F7  jne 0x1400316e0 <Benchmark()+1376>
400316F9  cmp ebx,esi
400316FB  je 0x14003194d <Benchmark()+1997>
40031701  add esi,0x1
40031704  cmp esi,0x1388
4003170A  jne 0x140031693 <Benchmark()+1299>
4003170C  mov rax,QWORD PTR [rsp+0x38]
40031711  lea rcx,[rip+0x1851a8]        # 0x1401b68c0
40031718  mov edx,DWORD PTR [rsp+0x40]
4003171C  mov edi,DWORD PTR [rax]
4003171E  lea r8d,[rdi-0x1]
40031722  mov DWORD PTR [rsp+0x28],edi
40031726  mov DWORD PTR [rax],r8d
40031729  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
4003172E  mov rcx,QWORD PTR [rsp+0x130]
40031736  test rcx,rcx
40031739  je 0x140031740 <Benchmark()+1472>
4003173B  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031740  mov rdi,QWORD PTR [rsp+0x20]
40031745  mov rcx,rdi
40031748  call 0x140035f40 <New::HashBase::~HashBase()>
4003174D  lea rcx,[rdi+0x18]
40031751  mov QWORD PTR [rsp+0x118],0x0
4003175D  mov QWORD PTR [rsp+0x120],0x0
40031769  call 0x14010a2e0 <Upp::HashBase::HashBase()>
4003176E  movzx eax,BYTE PTR [rip+0x1850ab]        # 0x1401b6820
40031775  test al,al
40031777  jne 0x14003178d <Benchmark()+1549>
40031779  lea rcx,[rip+0x1850a0]        # 0x1401b6820
40031780  call 0x140157920 <__cxa_guard_acquire>
40031785  test eax,eax
40031787  jne 0x1400340e0 <Benchmark()+12128>
4003178D  lea rcx,[rip+0x1718ec]        # 0x1401a3080 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting44>
40031794  call 0x140002b00 <__emutls_get_address>
40031799  mov r12,rax
4003179C  call QWORD PTR [rip+0x159466]        # 0x14018ac08 <__imp_timeGetTime>
400317A2  add DWORD PTR [r12],0x1
400317A7  mov r14d,eax
400317AA  xor ebx,ebx
400317AC  lea r13,[rsp+0x90]
400317B4  jmp 0x1400317ec <Benchmark()+1644>
400317B6  nop WORD PTR cs:[rax+rax*1+0x0]
400317C0  lea edx,[rax+0x1]
400317C3  mov DWORD PTR [rsp+0x120],edx
400317CA  mov DWORD PTR [rdi+rax*4],ebx
400317CD  mov rax,QWORD PTR [rsp+0x20]
400317D2  mov edx,ebx
400317D4  lea rcx,[rax+0x18]
400317D8  call 0x140106bb0 <Upp::HashBase::Add(unsigned int)>
400317DD  add ebx,0x1
400317E0  cmp ebx,0x1388
400317E6  je 0x140031e27 <Benchmark()+3239>
400317EC  movsxd rax,DWORD PTR [rsp+0x120]
400317F4  mov edx,DWORD PTR [rsp+0x124]
400317FB  mov rdi,QWORD PTR [rsp+0x118]
40031803  cmp eax,edx
40031805  jl 0x1400317c0 <Benchmark()+1600>
40031807  cmp edx,0x7fffffff
4003180D  je 0x140033e5e <Benchmark()+11486>
40031813  cmp edx,0x55555553
40031819  jg 0x140031e00 <Benchmark()+3200>
4003181F  mov esi,edx
40031821  sar esi,1
40031823  add esi,edx
40031825  add edx,0x1
40031828  cmp esi,edx
4003182A  cmovl esi,edx
4003182D  xor eax,eax
4003182F  xor r9d,r9d
40031832  movsxd rbp,esi
40031835  shl rbp,0x2
40031839  test esi,esi
4003183B  mov QWORD PTR [rsp+0x90],rbp
40031843  jne 0x1400318b0 <Benchmark()+1840>
40031845  add esi,eax
40031847  movsxd r8,DWORD PTR [rsp+0x120]
4003184F  mov DWORD PTR [rsp+0x124],esi
40031856  mov rdx,QWORD PTR [rsp+0x118]
4003185E  mov rax,r8
40031861  shl r8,0x2
40031865  test rdx,rdx
40031868  je 0x140031884 <Benchmark()+1796>
4003186A  mov rcx,r9
4003186D  call 0x140002d78 <memcpy>
40031872  movsxd r8,DWORD PTR [rsp+0x120]
4003187A  mov r9,rax
4003187D  mov rax,r8
40031880  shl r8,0x2
40031884  add eax,0x1
40031887  test rdi,rdi
4003188A  mov QWORD PTR [rsp+0x118],r9
40031892  mov DWORD PTR [rsp+0x120],eax
40031899  mov DWORD PTR [r9+r8*1],ebx
4003189D  je 0x1400317cd <Benchmark()+1613>
400318A3  mov rcx,rdi
400318A6  call 0x14003fa40 <Upp::MemoryFree(void*)>
400318AB  jmp 0x1400317cd <Benchmark()+1613>
400318B0  mov rcx,r13
400318B3  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
400318B8  mov r9,rax
400318BB  mov rax,QWORD PTR [rsp+0x90]
400318C3  sub rax,rbp
400318C6  shr rax,0x2
400318CA  jmp 0x140031845 <Benchmark()+1733>
400318CF  nop 
400318D0  mov ebx,DWORD PTR [rsp+0x120]
400318D7  mov edx,DWORD PTR [rsp+0x124]
400318DE  movsxd rax,ebx
400318E1  cmp ebx,edx
400318E3  jge 0x140031ab0 <Benchmark()+2352>
400318E9  lea edx,[rax+0x1]
400318EC  mov DWORD PTR [rsp+0x120],edx
400318F3  lea r13,[r13+rax*8+0x0]
400318F8  mov edx,DWORD PTR [rsp+0x13c]
400318FF  movsxd rax,DWORD PTR [rsp+0x138]
40031907  cmp eax,edx
40031909  jge 0x1400319f1 <Benchmark()+2161>
4003190F  lea edx,[rax+0x1]
40031912  mov DWORD PTR [rsp+0x138],edx
40031919  mov DWORD PTR [r12+rax*4],edi
4003191D  cmp ebx,DWORD PTR [rsp+0x128]
40031924  mov DWORD PTR [r13+0x0],r15d
40031928  mov DWORD PTR [r13+0x4],0xffffffff
40031930  jge 0x140031970 <Benchmark()+2032>
40031932  movsxd rdx,DWORD PTR [rbp+0x4]
40031936  cmp ebx,esi
40031938  mov rax,QWORD PTR [rsp+0x118]
40031940  mov DWORD PTR [rax+rdx*8+0x4],ebx
40031944  mov DWORD PTR [rbp+0x4],ebx
40031947  jne 0x140031701 <Benchmark()+1409>
4003194D  add DWORD PTR [rip+0x184acc],0x1        # 0x1401b6420
40031954  add esi,0x1
40031957  cmp esi,0x1388
4003195D  jne 0x140031693 <Benchmark()+1299>
40031963  jmp 0x14003170c <Benchmark()+1420>
40031968  nop DWORD PTR [rax+rax*1+0x0]
40031970  mov rcx,QWORD PTR [rsp+0x20]
40031975  call 0x140035a90 <New::HashBase::GrowMap()>
4003197A  jmp 0x1400316f9 <Benchmark()+1401>
4003197F  nop 
40031980  mov ebx,DWORD PTR [rsp+0x120]
40031987  mov edx,DWORD PTR [rsp+0x124]
4003198E  movsxd rax,ebx
40031991  cmp ebx,edx
40031993  jge 0x140031c70 <Benchmark()+2800>
40031999  lea edx,[rax+0x1]
4003199C  mov r14,QWORD PTR [rsp+0x130]
400319A4  mov DWORD PTR [rsp+0x120],edx
400319AB  lea r12,[r13+rax*8+0x0]
400319B0  mov edx,DWORD PTR [rsp+0x13c]
400319B7  movsxd rax,DWORD PTR [rsp+0x138]
400319BF  cmp eax,edx
400319C1  jge 0x140031bb0 <Benchmark()+2608>
400319C7  lea edx,[rax+0x1]
400319CA  mov DWORD PTR [rsp+0x138],edx
400319D1  mov DWORD PTR [r14+rax*4],edi
400319D5  test ebx,ebx
400319D7  mov DWORD PTR [r12],r15d
400319DB  mov DWORD PTR [r12+0x4],0xffffffff
400319E4  je 0x140031970 <Benchmark()+2032>
400319E6  mov DWORD PTR [rbp+0x4],ebx
400319E9  mov DWORD PTR [rbp+0x0],ebx
400319EC  jmp 0x1400316f9 <Benchmark()+1401>
400319F1  cmp edx,0x7fffffff
400319F7  je 0x140031d10 <Benchmark()+2960>
400319FD  cmp edx,0x55555553
40031A03  jg 0x140031b81 <Benchmark()+2561>
40031A09  mov r14d,edx
40031A0C  sar r14d,1
40031A0F  add r14d,edx
40031A12  add edx,0x1
40031A15  cmp r14d,edx
40031A18  cmovl r14d,edx
40031A1C  xor r9d,r9d
40031A1F  movsxd rax,r14d
40031A22  shl rax,0x2
40031A26  mov QWORD PTR [rsp+0x30],rax
40031A2B  mov QWORD PTR [rsp+0x88],rax
40031A33  xor eax,eax
40031A35  test r14d,r14d
40031A38  jne 0x140031db0 <Benchmark()+3120>
40031A3E  add r14d,eax
40031A41  movsxd r8,DWORD PTR [rsp+0x138]
40031A49  mov DWORD PTR [rsp+0x13c],r14d
40031A51  mov rdx,QWORD PTR [rsp+0x130]
40031A59  mov rax,r8
40031A5C  shl r8,0x2
40031A60  test rdx,rdx
40031A63  je 0x140031a7f <Benchmark()+2303>
40031A65  mov rcx,r9
40031A68  call 0x140002d78 <memcpy>
40031A6D  movsxd r8,DWORD PTR [rsp+0x138]
40031A75  mov r9,rax
40031A78  mov rax,r8
40031A7B  shl r8,0x2
40031A7F  add eax,0x1
40031A82  test r12,r12
40031A85  mov QWORD PTR [rsp+0x130],r9
40031A8D  mov DWORD PTR [rsp+0x138],eax
40031A94  mov DWORD PTR [r9+r8*1],edi
40031A98  je 0x14003191d <Benchmark()+1949>
40031A9E  mov rcx,r12
40031AA1  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031AA6  jmp 0x14003191d <Benchmark()+1949>
40031AAB  nop DWORD PTR [rax+rax*1+0x0]
40031AB0  cmp edx,0x7fffffff
40031AB6  je 0x140031d30 <Benchmark()+2992>
40031ABC  cmp edx,0x55555553
40031AC2  jg 0x140031b54 <Benchmark()+2516>
40031AC8  mov r12d,edx
40031ACB  sar r12d,1
40031ACE  add r12d,edx
40031AD1  add edx,0x1
40031AD4  cmp r12d,edx
40031AD7  cmovl r12d,edx
40031ADB  xor eax,eax
40031ADD  xor r9d,r9d
40031AE0  movsxd r14,r12d
40031AE3  shl r14,0x3
40031AE7  test r12d,r12d
40031AEA  mov QWORD PTR [rsp+0x80],r14
40031AF2  jne 0x140031dd3 <Benchmark()+3155>
40031AF8  add r12d,eax
40031AFB  mov rdx,QWORD PTR [rsp+0x118]
40031B03  mov DWORD PTR [rsp+0x124],r12d
40031B0B  test rdx,rdx
40031B0E  je 0x140031b27 <Benchmark()+2471>
40031B10  movsxd r8,DWORD PTR [rsp+0x120]
40031B18  mov rcx,r9
40031B1B  shl r8,0x3
40031B1F  call 0x140002d78 <memcpy>
40031B24  mov r9,rax
40031B27  mov rcx,r13
40031B2A  mov QWORD PTR [rsp+0x118],r9
40031B32  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031B37  mov r13,QWORD PTR [rsp+0x118]
40031B3F  movsxd rax,DWORD PTR [rsp+0x120]
40031B47  mov r12,QWORD PTR [rsp+0x130]
40031B4F  jmp 0x1400318e9 <Benchmark()+1897>
40031B54  movabs rax,0x3fffffff8
40031B5E  lea rcx,[rsp+0x80]
40031B66  mov QWORD PTR [rsp+0x80],rax
40031B6E  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031B73  mov r9,rax
40031B76  mov r12d,0x7fffffff
40031B7C  jmp 0x140031afb <Benchmark()+2427>
40031B81  movabs rax,0x1fffffffc
40031B8B  mov rcx,QWORD PTR [rsp+0x28]
40031B90  mov QWORD PTR [rsp+0x88],rax
40031B98  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031B9D  mov r9,rax
40031BA0  mov r14d,0x7fffffff
40031BA6  jmp 0x140031a41 <Benchmark()+2241>
40031BAB  nop DWORD PTR [rax+rax*1+0x0]
40031BB0  cmp edx,0x7fffffff
40031BB6  je 0x140033dcc <Benchmark()+11340>
40031BBC  cmp edx,0x55555553
40031BC2  jg 0x140031d80 <Benchmark()+3072>
40031BC8  mov r13d,edx
40031BCB  sar r13d,1
40031BCE  add r13d,edx
40031BD1  add edx,0x1
40031BD4  cmp r13d,edx
40031BD7  cmovl r13d,edx
40031BDB  xor r9d,r9d
40031BDE  movsxd rax,r13d
40031BE1  shl rax,0x2
40031BE5  mov QWORD PTR [rsp+0x30],rax
40031BEA  mov QWORD PTR [rsp+0x78],rax
40031BEF  xor eax,eax
40031BF1  test r13d,r13d
40031BF4  jne 0x140033e3e <Benchmark()+11454>
40031BFA  add r13d,eax
40031BFD  movsxd r8,DWORD PTR [rsp+0x138]
40031C05  mov DWORD PTR [rsp+0x13c],r13d
40031C0D  mov rdx,QWORD PTR [rsp+0x130]
40031C15  mov rax,r8
40031C18  shl r8,0x2
40031C1C  test rdx,rdx
40031C1F  je 0x140031c3b <Benchmark()+2747>
40031C21  mov rcx,r9
40031C24  call 0x140002d78 <memcpy>
40031C29  movsxd r8,DWORD PTR [rsp+0x138]
40031C31  mov r9,rax
40031C34  mov rax,r8
40031C37  shl r8,0x2
40031C3B  add eax,0x1
40031C3E  test r14,r14
40031C41  mov QWORD PTR [rsp+0x130],r9
40031C49  mov DWORD PTR [rsp+0x138],eax
40031C50  mov DWORD PTR [r9+r8*1],edi
40031C54  je 0x1400319d5 <Benchmark()+2133>
40031C5A  mov rcx,r14
40031C5D  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031C62  jmp 0x1400319d5 <Benchmark()+2133>
40031C67  nop WORD PTR [rax+rax*1+0x0]
40031C70  cmp edx,0x7fffffff
40031C76  je 0x140033de4 <Benchmark()+11364>
40031C7C  cmp edx,0x55555553
40031C82  jg 0x140031d50 <Benchmark()+3024>
40031C88  mov r12d,edx
40031C8B  sar r12d,1
40031C8E  add r12d,edx
40031C91  add edx,0x1
40031C94  cmp r12d,edx
40031C97  cmovl r12d,edx
40031C9B  xor eax,eax
40031C9D  xor r9d,r9d
40031CA0  movsxd r14,r12d
40031CA3  shl r14,0x3
40031CA7  test r12d,r12d
40031CAA  mov QWORD PTR [rsp+0x70],r14
40031CAF  jne 0x140033e20 <Benchmark()+11424>
40031CB5  add r12d,eax
40031CB8  mov rdx,QWORD PTR [rsp+0x118]
40031CC0  mov DWORD PTR [rsp+0x124],r12d
40031CC8  test rdx,rdx
40031CCB  je 0x140031ce4 <Benchmark()+2916>
40031CCD  movsxd r8,DWORD PTR [rsp+0x120]
40031CD5  mov rcx,r9
40031CD8  shl r8,0x3
40031CDC  call 0x140002d78 <memcpy>
40031CE1  mov r9,rax
40031CE4  mov rcx,r13
40031CE7  mov QWORD PTR [rsp+0x118],r9
40031CEF  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031CF4  mov r13,QWORD PTR [rsp+0x118]
40031CFC  movsxd rax,DWORD PTR [rsp+0x120]
40031D04  jmp 0x140031999 <Benchmark()+2073>
40031D09  nop DWORD PTR [rax+0x0]
40031D10  lea rcx,[rip+0x13c2f9]        # 0x14016e010
40031D17  call 0x1400b9640 <Upp::Panic(char const*)>
40031D1C  mov edx,DWORD PTR [rsp+0x13c]
40031D23  jmp 0x1400319fd <Benchmark()+2173>
40031D28  nop DWORD PTR [rax+rax*1+0x0]
40031D30  lea rcx,[rip+0x13c2d9]        # 0x14016e010
40031D37  call 0x1400b9640 <Upp::Panic(char const*)>
40031D3C  mov edx,DWORD PTR [rsp+0x124]
40031D43  jmp 0x140031abc <Benchmark()+2364>
40031D48  nop DWORD PTR [rax+rax*1+0x0]
40031D50  movabs rax,0x3fffffff8
40031D5A  lea rcx,[rsp+0x70]
40031D5F  mov QWORD PTR [rsp+0x70],rax
40031D64  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031D69  mov r9,rax
40031D6C  mov r12d,0x7fffffff
40031D72  jmp 0x140031cb8 <Benchmark()+2872>
40031D77  nop WORD PTR [rax+rax*1+0x0]
40031D80  movabs rax,0x1fffffffc
40031D8A  lea rcx,[rsp+0x78]
40031D8F  mov QWORD PTR [rsp+0x78],rax
40031D94  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031D99  mov r9,rax
40031D9C  mov r13d,0x7fffffff
40031DA2  jmp 0x140031bfd <Benchmark()+2685>
40031DA7  nop WORD PTR [rax+rax*1+0x0]
40031DB0  mov rcx,QWORD PTR [rsp+0x28]
40031DB5  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031DBA  mov r9,rax
40031DBD  mov rax,QWORD PTR [rsp+0x88]
40031DC5  sub rax,QWORD PTR [rsp+0x30]
40031DCA  shr rax,0x2
40031DCE  jmp 0x140031a3e <Benchmark()+2238>
40031DD3  lea rcx,[rsp+0x80]
40031DDB  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031DE0  mov r9,rax
40031DE3  mov rax,QWORD PTR [rsp+0x80]
40031DEB  sub rax,r14
40031DEE  shr rax,0x3
40031DF2  jmp 0x140031af8 <Benchmark()+2424>
40031DF7  nop WORD PTR [rax+rax*1+0x0]
40031E00  movabs rax,0x1fffffffc
40031E0A  mov rcx,r13
40031E0D  mov QWORD PTR [rsp+0x90],rax
40031E15  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40031E1A  mov r9,rax
40031E1D  mov esi,0x7fffffff
40031E22  jmp 0x140031847 <Benchmark()+1735>
40031E27  mov eax,DWORD PTR [r12]
40031E2B  lea rcx,[rip+0x184a0e]        # 0x1401b6840
40031E32  mov edx,r14d
40031E35  lea r8d,[rax-0x1]
40031E39  mov DWORD PTR [r12],r8d
40031E3D  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40031E42  movzx eax,BYTE PTR [rip+0x184957]        # 0x1401b67a0
40031E49  test al,al
40031E4B  jne 0x140031e61 <Benchmark()+3297>
40031E4D  lea rcx,[rip+0x18494c]        # 0x1401b67a0
40031E54  call 0x140157920 <__cxa_guard_acquire>
40031E59  test eax,eax
40031E5B  jne 0x140034110 <Benchmark()+12176>
40031E61  lea rcx,[rip+0x171238]        # 0x1401a30a0 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting50>
40031E68  call 0x140002b00 <__emutls_get_address>
40031E6D  mov rbx,rax
40031E70  call QWORD PTR [rip+0x158d92]        # 0x14018ac08 <__imp_timeGetTime>
40031E76  mov r8d,DWORD PTR [rbx]
40031E79  xor ebp,ebp
40031E7B  xor r10d,r10d
40031E7E  mov r13,QWORD PTR [rsp+0x150]
40031E86  mov r12d,DWORD PTR [rsp+0x158]
40031E8E  mov rsi,QWORD PTR [rsp+0x118]
40031E96  mov rdi,QWORD PTR [rsp+0x140]
40031E9E  lea edx,[r8+0x1]
40031EA2  mov DWORD PTR [rbx],edx
40031EA4  mov edx,ebp
40031EA6  bswap edx
40031EA8  and edx,r12d
40031EAB  mov r9d,DWORD PTR [r13+rdx*4+0x0]
40031EB0  test r9d,r9d
40031EB3  js 0x140031edd <Benchmark()+3421>
40031EB5  mov edx,r9d
40031EB8  jmp 0x140031ec8 <Benchmark()+3400>
40031EBA  nop WORD PTR [rax+rax*1+0x0]
40031EC0  mov edx,DWORD PTR [rdi+rcx*8]
40031EC3  cmp r9d,edx
40031EC6  je 0x140031edd <Benchmark()+3421>
40031EC8  movsxd rcx,edx
40031ECB  cmp DWORD PTR [rsi+rcx*4],r10d
40031ECF  jne 0x140031ec0 <Benchmark()+3392>
40031ED1  cmp edx,r10d
40031ED4  jne 0x140031edd <Benchmark()+3421>
40031ED6  add DWORD PTR [rip+0x184543],0x1        # 0x1401b6420
40031EDD  add r10d,0x1
40031EE1  sub ebp,0x5c9ec3ea
40031EE7  cmp r10d,0x1388
40031EEE  jne 0x140031ea4 <Benchmark()+3364>
40031EF0  mov DWORD PTR [rbx],r8d
40031EF3  lea rcx,[rip+0x1848c6]        # 0x1401b67c0
40031EFA  mov edx,eax
40031EFC  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40031F01  movzx eax,BYTE PTR [rip+0x184818]        # 0x1401b6720
40031F08  test al,al
40031F0A  jne 0x140031f20 <Benchmark()+3488>
40031F0C  lea rcx,[rip+0x18480d]        # 0x1401b6720
40031F13  call 0x140157920 <__cxa_guard_acquire>
40031F18  test eax,eax
40031F1A  jne 0x140034140 <Benchmark()+12224>
40031F20  lea rcx,[rip+0x171199]        # 0x1401a30c0 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting57>
40031F27  call 0x140002b00 <__emutls_get_address>
40031F2C  mov rdi,rax
40031F2F  mov QWORD PTR [rsp+0x30],rax
40031F34  call QWORD PTR [rip+0x158cce]        # 0x14018ac08 <__imp_timeGetTime>
40031F3A  mov rcx,QWORD PTR [rsp+0x130]
40031F42  mov DWORD PTR [rsp+0x28],eax
40031F46  add DWORD PTR [rdi],0x1
40031F49  test rcx,rcx
40031F4C  je 0x140031f53 <Benchmark()+3539>
40031F4E  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031F53  mov rax,QWORD PTR [rsp+0x20]
40031F58  mov QWORD PTR [rsp+0x130],0x0
40031F64  mov QWORD PTR [rsp+0x138],0x0
40031F70  lea rcx,[rax+0x18]
40031F74  call 0x1401068c0 <Upp::HashBase::ClearIndex()>
40031F79  mov rcx,QWORD PTR [rsp+0x118]
40031F81  test rcx,rcx
40031F84  je 0x140031f8b <Benchmark()+3595>
40031F86  call 0x14003fa40 <Upp::MemoryFree(void*)>
40031F8B  mov rax,QWORD PTR [rsp+0x20]
40031F90  lea r15,[rsp+0x98]
40031F98  xor ebp,ebp
40031F9A  xor esi,esi
40031F9C  mov QWORD PTR [rsp+0x118],0x0
40031FA8  mov QWORD PTR [rsp+0x120],0x0
40031FB4  lea r13,[rax+0x18]
40031FB8  nop DWORD PTR [rax+rax*1+0x0]
40031FC0  mov edi,esi
40031FC2  mov rdx,QWORD PTR [rsp+0x150]
40031FCA  sar edi,0x2
40031FCD  imul eax,edi,0xa3613c16
40031FD3  bswap eax
40031FD5  and eax,DWORD PTR [rsp+0x158]
40031FDC  mov eax,DWORD PTR [rdx+rax*4]
40031FDF  test eax,eax
40031FE1  js 0x140032020 <Benchmark()+3744>
40031FE3  mov rcx,QWORD PTR [rsp+0x140]
40031FEB  mov ebx,eax
40031FED  jmp 0x140031ff7 <Benchmark()+3703>
40031FEF  nop 
40031FF0  mov ebx,DWORD PTR [rcx+rdx*8]
40031FF3  cmp eax,ebx
40031FF5  je 0x140032020 <Benchmark()+3744>
40031FF7  movsxd rdx,ebx
40031FFA  cmp edi,DWORD PTR [rbp+rdx*4+0x0]
40031FFE  jne 0x140031ff0 <Benchmark()+3696>
40032000  test ebx,ebx
40032002  js 0x140032020 <Benchmark()+3744>
40032004  cmp ebx,esi
40032006  je 0x140032055 <Benchmark()+3797>
40032008  add esi,0x1
4003200B  cmp esi,0x1388
40032011  je 0x140032067 <Benchmark()+3815>
40032013  mov rbp,QWORD PTR [rsp+0x118]
4003201B  jmp 0x140031fc0 <Benchmark()+3648>
4003201D  nop DWORD PTR [rax]
40032020  mov ebx,DWORD PTR [rsp+0x120]
40032027  mov eax,DWORD PTR [rsp+0x124]
4003202E  cmp ebx,eax
40032030  jge 0x140032a70 <Benchmark()+6384>
40032036  lea eax,[rbx+0x1]
40032039  mov DWORD PTR [rsp+0x120],eax
40032040  movsxd rax,ebx
40032043  mov DWORD PTR [rbp+rax*4+0x0],edi
40032047  mov edx,edi
40032049  mov rcx,r13
4003204C  call 0x140106bb0 <Upp::HashBase::Add(unsigned int)>
40032051  cmp ebx,esi
40032053  jne 0x140032008 <Benchmark()+3720>
40032055  add DWORD PTR [rip+0x1843c4],0x1        # 0x1401b6420
4003205C  add esi,0x1
4003205F  cmp esi,0x1388
40032065  jne 0x140032013 <Benchmark()+3731>
40032067  mov rax,QWORD PTR [rsp+0x30]
4003206C  lea rcx,[rip+0x1846cd]        # 0x1401b6740
40032073  mov edx,DWORD PTR [rsp+0x28]
40032077  mov edi,DWORD PTR [rax]
40032079  lea r8d,[rdi-0x1]
4003207D  mov DWORD PTR [rsp+0x30],edi
40032081  mov DWORD PTR [rax],r8d
40032084  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032089  mov rax,QWORD PTR [rsp+0x20]
4003208E  lea rcx,[rax+0x18]
40032092  call 0x14010a320 <Upp::HashBase::~HashBase()>
40032097  mov rcx,QWORD PTR [rsp+0x118]
4003209F  test rcx,rcx
400320A2  je 0x1400320a9 <Benchmark()+3881>
400320A4  call 0x14003fa40 <Upp::MemoryFree(void*)>
400320A9  mov rcx,QWORD PTR [rsp+0x20]
400320AE  call 0x140035f10 <New::HashBase::HashBase()>
400320B3  mov QWORD PTR [rsp+0x130],0x0
400320BF  mov QWORD PTR [rsp+0x138],0x0
400320CB  movzx eax,BYTE PTR [rip+0x1845ce]        # 0x1401b66a0
400320D2  test al,al
400320D4  jne 0x1400320ea <Benchmark()+3946>
400320D6  lea rcx,[rip+0x1845c3]        # 0x1401b66a0
400320DD  call 0x140157920 <__cxa_guard_acquire>
400320E2  test eax,eax
400320E4  jne 0x140034170 <Benchmark()+12272>
400320EA  lea rcx,[rip+0x170fef]        # 0x1401a30e0 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting68>
400320F1  call 0x140002b00 <__emutls_get_address>
400320F6  mov r15,rax
400320F9  call QWORD PTR [rip+0x158b09]        # 0x14018ac08 <__imp_timeGetTime>
400320FF  mov DWORD PTR [rsp+0x28],eax
40032103  xor edi,edi
40032105  add DWORD PTR [r15],0x1
40032109  lea r14,[rsp+0xa0]
40032111  jmp 0x140032205 <Benchmark()+4229>
40032116  nop WORD PTR cs:[rax+rax*1+0x0]
40032120  lea edx,[rax+0x1]
40032123  shl rax,0x4
40032127  mov DWORD PTR [rsp+0x138],edx
4003212E  add rbp,rax
40032131  cmp BYTE PTR [rsi+0xe],0x0
40032135  jne 0x140032a20 <Benchmark()+6304>
4003213B  mov eax,DWORD PTR [rsi]
4003213D  mov DWORD PTR [rbp+0x0],eax
40032140  mov eax,DWORD PTR [rsi+0x4]
40032143  mov DWORD PTR [rbp+0x4],eax
40032146  mov eax,DWORD PTR [rsi+0x8]
40032149  mov DWORD PTR [rbp+0x8],eax
4003214C  mov eax,DWORD PTR [rsi+0xc]
4003214F  mov DWORD PTR [rbp+0xc],eax
40032152  cmp BYTE PTR [rsi+0xe],0x0
40032156  jne 0x140032301 <Benchmark()+4481>
4003215C  mov ebx,DWORD PTR [rsi]
4003215E  xor ebx,0xe2f62ff2
40032164  mov eax,ebx
40032166  shl eax,0x4
40032169  add eax,ebx
4003216B  xor eax,DWORD PTR [rsi+0x4]
4003216E  mov ebx,eax
40032170  shl eax,0x4
40032173  add eax,ebx
40032175  xor eax,DWORD PTR [rsi+0x8]
40032178  mov ebx,eax
4003217A  shl ebx,0x4
4003217D  add ebx,eax
4003217F  xor ebx,DWORD PTR [rsi+0xc]
40032182  mov esi,DWORD PTR [rsp+0x120]
40032189  imul ebx,ebx,0xa3613c16
4003218F  mov edx,DWORD PTR [rsp+0x124]
40032196  bswap ebx
40032198  or ebx,0x80000000
4003219E  mov rbp,QWORD PTR [rsp+0x118]
400321A6  movsxd rax,esi
400321A9  cmp esi,edx
400321AB  jge 0x140032943 <Benchmark()+6083>
400321B1  lea edx,[rax+0x1]
400321B4  lea rax,[rbp+rax*8+0x0]
400321B9  mov DWORD PTR [rsp+0x120],edx
400321C0  mov DWORD PTR [rax],ebx
400321C2  mov DWORD PTR [rax+0x4],0xffffffff
400321C9  mov eax,DWORD PTR [rsp+0x128]
400321D0  cmp esi,eax
400321D2  jge 0x140032330 <Benchmark()+4528>
400321D8  and ebx,eax
400321DA  mov rax,QWORD PTR [rsp+0x110]
400321E2  lea rax,[rax+rbx*8]
400321E6  cmp DWORD PTR [rax],0xffffffff
400321E9  jne 0x1400329e0 <Benchmark()+6240>
400321EF  mov DWORD PTR [rax+0x4],esi
400321F2  mov DWORD PTR [rax],esi
400321F4  add rdi,0x10
400321F8  cmp rdi,0x13880
400321FF  je 0x14003234b <Benchmark()+4555>
40032205  mov rsi,QWORD PTR [rsp+0x100]
4003220D  movsxd rax,DWORD PTR [rsp+0x138]
40032215  mov edx,DWORD PTR [rsp+0x13c]
4003221C  mov rbp,QWORD PTR [rsp+0x130]
40032224  add rsi,rdi
40032227  cmp eax,edx
40032229  jl 0x140032120 <Benchmark()+4000>
4003222F  cmp edx,0x7fffffff
40032235  je 0x140032b23 <Benchmark()+6563>
4003223B  cmp edx,0x55555553
40032241  jg 0x1400329f0 <Benchmark()+6256>
40032247  mov ebx,edx
40032249  sar ebx,1
4003224B  add ebx,edx
4003224D  add edx,0x1
40032250  cmp ebx,edx
40032252  cmovl ebx,edx
40032255  xor eax,eax
40032257  xor r9d,r9d
4003225A  movsxd r12,ebx
4003225D  shl r12,0x4
40032261  test ebx,ebx
40032263  mov QWORD PTR [rsp+0xa0],r12
4003226B  jne 0x140032310 <Benchmark()+4496>
40032271  add ebx,eax
40032273  movsxd r8,DWORD PTR [rsp+0x138]
4003227B  mov DWORD PTR [rsp+0x13c],ebx
40032282  mov rdx,QWORD PTR [rsp+0x130]
4003228A  mov rax,r8
4003228D  shl r8,0x4
40032291  test rdx,rdx
40032294  je 0x1400322b0 <Benchmark()+4400>
40032296  mov rcx,r9
40032299  call 0x140002d78 <memcpy>
4003229E  movsxd r8,DWORD PTR [rsp+0x138]
400322A6  mov r9,rax
400322A9  mov rax,r8
400322AC  shl r8,0x4
400322B0  mov QWORD PTR [rsp+0x130],r9
400322B8  lea rbx,[r9+r8*1]
400322BC  add eax,0x1
400322BF  mov DWORD PTR [rsp+0x138],eax
400322C6  cmp BYTE PTR [rsi+0xe],0x0
400322CA  jne 0x140032a60 <Benchmark()+6368>
400322D0  mov eax,DWORD PTR [rsi]
400322D2  mov DWORD PTR [rbx],eax
400322D4  mov eax,DWORD PTR [rsi+0x4]
400322D7  mov DWORD PTR [rbx+0x4],eax
400322DA  mov eax,DWORD PTR [rsi+0x8]
400322DD  mov DWORD PTR [rbx+0x8],eax
400322E0  mov eax,DWORD PTR [rsi+0xc]
400322E3  mov DWORD PTR [rbx+0xc],eax
400322E6  test rbp,rbp
400322E9  je 0x140032152 <Benchmark()+4050>
400322EF  mov rcx,rbp
400322F2  call 0x14003fa40 <Upp::MemoryFree(void*)>
400322F7  cmp BYTE PTR [rsi+0xe],0x0
400322FB  je 0x14003215c <Benchmark()+4060>
40032301  mov rcx,rsi
40032304  call 0x14014b800 <Upp::String0::LHashValue() const>
40032309  mov ebx,eax
4003230B  jmp 0x140032182 <Benchmark()+4098>
40032310  mov rcx,r14
40032313  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032318  mov r9,rax
4003231B  mov rax,QWORD PTR [rsp+0xa0]
40032323  sub rax,r12
40032326  shr rax,0x4
4003232A  jmp 0x140032271 <Benchmark()+4337>
4003232F  nop 
40032330  mov rcx,QWORD PTR [rsp+0x20]
40032335  call 0x140035a90 <New::HashBase::GrowMap()>
4003233A  add rdi,0x10
4003233E  cmp rdi,0x13880
40032345  jne 0x140032205 <Benchmark()+4229>
4003234B  mov eax,DWORD PTR [r15]
4003234E  lea rcx,[rip+0x18436b]        # 0x1401b66c0
40032355  mov edx,DWORD PTR [rsp+0x28]
40032359  lea r8d,[rax-0x1]
4003235D  mov DWORD PTR [r15],r8d
40032360  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032365  movzx eax,BYTE PTR [rip+0x1842b4]        # 0x1401b6620
4003236C  test al,al
4003236E  jne 0x140032384 <Benchmark()+4612>
40032370  lea rcx,[rip+0x1842a9]        # 0x1401b6620
40032377  call 0x140157920 <__cxa_guard_acquire>
4003237C  test eax,eax
4003237E  jne 0x140034080 <Benchmark()+12032>
40032384  lea rcx,[rip+0x170d75]        # 0x1401a3100 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting74>
4003238B  call 0x140002b00 <__emutls_get_address>
40032390  mov r13,rax
40032393  call QWORD PTR [rip+0x15886f]        # 0x14018ac08 <__imp_timeGetTime>
40032399  add DWORD PTR [r13+0x0],0x1
4003239E  mov r14d,eax
400323A1  xor ebp,ebp
400323A3  mov rsi,QWORD PTR [rsp+0x100]
400323AB  add rsi,rbp
400323AE  cmp BYTE PTR [rsi+0xe],0x0
400323B2  jne 0x140033100 <Benchmark()+8064>
400323B8  mov ebx,DWORD PTR [rsi]
400323BA  xor ebx,0xe2f62ff2
400323C0  mov eax,ebx
400323C2  shl eax,0x4
400323C5  add eax,ebx
400323C7  xor eax,DWORD PTR [rsi+0x4]
400323CA  mov ebx,eax
400323CC  shl eax,0x4
400323CF  add eax,ebx
400323D1  xor eax,DWORD PTR [rsi+0x8]
400323D4  mov ebx,eax
400323D6  shl ebx,0x4
400323D9  add ebx,eax
400323DB  xor ebx,DWORD PTR [rsi+0xc]
400323DE  imul ebx,ebx,0xa3613c16
400323E4  mov rax,QWORD PTR [rsp+0x110]
400323EC  bswap ebx
400323EE  or ebx,0x80000000
400323F4  mov edx,ebx
400323F6  and edx,DWORD PTR [rsp+0x128]
400323FD  mov edi,DWORD PTR [rax+rdx*8]
40032400  test edi,edi
40032402  jns 0x140032419 <Benchmark()+4761>
40032404  jmp 0x140032460 <Benchmark()+4832>
40032406  nop WORD PTR cs:[rax+rax*1+0x0]
40032410  mov edi,DWORD PTR [r12+0x4]
40032415  test edi,edi
40032417  js 0x140032460 <Benchmark()+4832>
40032419  mov rax,QWORD PTR [rsp+0x118]
40032421  movsxd rcx,edi
40032424  lea r12,[rax+rcx*8]
40032428  cmp ebx,DWORD PTR [r12]
4003242C  jne 0x140032410 <Benchmark()+4752>
4003242E  shl rcx,0x4
40032432  add rcx,QWORD PTR [rsp+0x130]
4003243A  movzx eax,BYTE PTR [rcx+0xe]
4003243E  or al,BYTE PTR [rsi+0xe]
40032441  jne 0x140032c14 <Benchmark()+6804>
40032447  mov rdx,QWORD PTR [rcx]
4003244A  mov rax,QWORD PTR [rcx+0x8]
4003244E  xor rdx,QWORD PTR [rsi]
40032451  xor rax,QWORD PTR [rsi+0x8]
40032455  or rdx,rax
40032458  sete al
4003245B  test al,al
4003245D  je 0x140032410 <Benchmark()+4752>
4003245F  nop 
40032460  add DWORD PTR [rip+0x183fba],edi        # 0x1401b6420
40032466  add rbp,0x10
4003246A  cmp rbp,0x13880
40032471  jne 0x1400323a3 <Benchmark()+4643>
40032477  mov eax,DWORD PTR [r13+0x0]
4003247B  lea rcx,[rip+0x1841be]        # 0x1401b6640
40032482  mov edx,r14d
40032485  lea r8d,[rax-0x1]
40032489  mov DWORD PTR [r13+0x0],r8d
4003248D  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032492  movzx eax,BYTE PTR [rip+0x184107]        # 0x1401b65a0
40032499  test al,al
4003249B  jne 0x1400324b1 <Benchmark()+4913>
4003249D  lea rcx,[rip+0x1840fc]        # 0x1401b65a0
400324A4  call 0x140157920 <__cxa_guard_acquire>
400324A9  test eax,eax
400324AB  jne 0x140034050 <Benchmark()+11984>
400324B1  lea rcx,[rip+0x170c68]        # 0x1401a3120 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting80>
400324B8  call 0x140002b00 <__emutls_get_address>
400324BD  mov rdi,rax
400324C0  mov QWORD PTR [rsp+0x38],rax
400324C5  call QWORD PTR [rip+0x15873d]        # 0x14018ac08 <__imp_timeGetTime>
400324CB  add DWORD PTR [rdi],0x1
400324CE  mov DWORD PTR [rsp+0x40],eax
400324D2  lea rax,[rsp+0xc8]
400324DA  xor ebp,ebp
400324DC  mov QWORD PTR [rsp+0x28],rax
400324E1  mov ebx,ebp
400324E3  sar ebx,0x2
400324E6  movsxd rbx,ebx
400324E9  shl rbx,0x4
400324ED  add rbx,QWORD PTR [rsp+0x100]
400324F5  cmp BYTE PTR [rbx+0xe],0x0
400324F9  jne 0x140033120 <Benchmark()+8096>
400324FF  mov esi,DWORD PTR [rbx]
40032501  xor esi,0xe2f62ff2
40032507  mov eax,esi
40032509  shl eax,0x4
4003250C  add eax,esi
4003250E  xor eax,DWORD PTR [rbx+0x4]
40032511  mov esi,eax
40032513  shl eax,0x4
40032516  add eax,esi
40032518  xor eax,DWORD PTR [rbx+0x8]
4003251B  mov esi,eax
4003251D  shl esi,0x4
40032520  add esi,eax
40032522  xor esi,DWORD PTR [rbx+0xc]
40032525  imul esi,esi,0xa3613c16
4003252B  mov rax,QWORD PTR [rsp+0x110]
40032533  bswap esi
40032535  or esi,0x80000000
4003253B  mov r12,QWORD PTR [rsp+0x118]
40032543  mov edx,esi
40032545  and edx,DWORD PTR [rsp+0x128]
4003254C  lea r15,[rax+rdx*8]
40032550  mov edi,DWORD PTR [r15]
40032553  test edi,edi
40032555  jns 0x140032568 <Benchmark()+5096>
40032557  jmp 0x140033410 <Benchmark()+8848>
4003255C  nop DWORD PTR [rax+0x0]
40032560  mov edi,DWORD PTR [r13+0x4]
40032564  test edi,edi
40032566  js 0x1400325c0 <Benchmark()+5184>
40032568  movsxd rcx,edi
4003256B  lea r13,[r12+rcx*8]
4003256F  cmp esi,DWORD PTR [r13+0x0]
40032573  jne 0x140032560 <Benchmark()+5088>
40032575  shl rcx,0x4
40032579  add rcx,QWORD PTR [rsp+0x130]
40032581  movzx eax,BYTE PTR [rcx+0xe]
40032585  or al,BYTE PTR [rbx+0xe]
40032588  jne 0x140032c30 <Benchmark()+6832>
4003258E  mov rdx,QWORD PTR [rcx]
40032591  mov rax,QWORD PTR [rcx+0x8]
40032595  xor rdx,QWORD PTR [rbx]
40032598  xor rax,QWORD PTR [rbx+0x8]
4003259C  or rdx,rax
4003259F  sete al
400325A2  test al,al
400325A4  jne 0x140032668 <Benchmark()+5352>
400325AA  mov edi,DWORD PTR [r13+0x4]
400325AE  mov r12,QWORD PTR [rsp+0x118]
400325B6  test edi,edi
400325B8  jns 0x140032568 <Benchmark()+5096>
400325BA  nop WORD PTR [rax+rax*1+0x0]
400325C0  mov edi,DWORD PTR [rsp+0x120]
400325C7  mov edx,DWORD PTR [rsp+0x124]
400325CE  movsxd rax,edi
400325D1  cmp edi,edx
400325D3  jge 0x140033240 <Benchmark()+8384>
400325D9  lea edx,[rax+0x1]
400325DC  mov r14,QWORD PTR [rsp+0x130]
400325E4  mov DWORD PTR [rsp+0x120],edx
400325EB  lea r13,[r12+rax*8]
400325EF  mov edx,DWORD PTR [rsp+0x13c]
400325F6  movsxd rax,DWORD PTR [rsp+0x138]
400325FE  cmp eax,edx
40032600  jge 0x140033000 <Benchmark()+7808>
40032606  lea edx,[rax+0x1]
40032609  shl rax,0x4
4003260D  mov DWORD PTR [rsp+0x138],edx
40032614  add r14,rax
40032617  cmp BYTE PTR [rbx+0xe],0x0
4003261B  jne 0x1400334c0 <Benchmark()+9024>
40032621  mov eax,DWORD PTR [rbx]
40032623  mov DWORD PTR [r14],eax
40032626  mov eax,DWORD PTR [rbx+0x4]
40032629  mov DWORD PTR [r14+0x4],eax
4003262D  mov eax,DWORD PTR [rbx+0x8]
40032630  mov DWORD PTR [r14+0x8],eax
40032634  mov eax,DWORD PTR [rbx+0xc]
40032637  mov DWORD PTR [r14+0xc],eax
4003263B  cmp edi,DWORD PTR [rsp+0x128]
40032642  mov DWORD PTR [r13+0x0],esi
40032646  mov DWORD PTR [r13+0x4],0xffffffff
4003264E  jge 0x140033204 <Benchmark()+8324>
40032654  movsxd rdx,DWORD PTR [r15+0x4]
40032658  mov rax,QWORD PTR [rsp+0x118]
40032660  mov DWORD PTR [rax+rdx*8+0x4],edi
40032664  mov DWORD PTR [r15+0x4],edi
40032668  cmp edi,ebp
4003266A  je 0x1400330e2 <Benchmark()+8034>
40032670  add ebp,0x1
40032673  cmp ebp,0x1388
40032679  jne 0x1400324e1 <Benchmark()+4961>
4003267F  mov rax,QWORD PTR [rsp+0x38]
40032684  lea rcx,[rip+0x183f35]        # 0x1401b65c0
4003268B  mov edx,DWORD PTR [rsp+0x40]
4003268F  mov edi,DWORD PTR [rax]
40032691  lea r8d,[rdi-0x1]
40032695  mov DWORD PTR [rsp+0x28],edi
40032699  mov DWORD PTR [rax],r8d
4003269C  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
400326A1  mov rdi,QWORD PTR [rsp+0x20]
400326A6  lea rdx,[rdi+0x28]
400326AA  lea rcx,[rdi+0x20]
400326AE  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
400326B3  mov rcx,rdi
400326B6  call 0x140035f40 <New::HashBase::~HashBase()>
400326BB  lea rcx,[rdi+0x18]
400326BF  mov QWORD PTR [rsp+0x118],0x0
400326CB  mov QWORD PTR [rsp+0x120],0x0
400326D7  call 0x14010a2e0 <Upp::HashBase::HashBase()>
400326DC  movzx eax,BYTE PTR [rip+0x183e3d]        # 0x1401b6520
400326E3  test al,al
400326E5  jne 0x1400326fb <Benchmark()+5499>
400326E7  lea rcx,[rip+0x183e32]        # 0x1401b6520
400326EE  call 0x140157920 <__cxa_guard_acquire>
400326F3  test eax,eax
400326F5  jne 0x1400340b0 <Benchmark()+12080>
400326FB  lea rcx,[rip+0x170a3e]        # 0x1401a3140 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting90>
40032702  call 0x140002b00 <__emutls_get_address>
40032707  mov r14,rax
4003270A  call QWORD PTR [rip+0x1584f8]        # 0x14018ac08 <__imp_timeGetTime>
40032710  add DWORD PTR [r14],0x1
40032714  mov r15d,eax
40032717  xor ebp,ebp
40032719  jmp 0x14003281b <Benchmark()+5787>
4003271E  xchg ax,ax
40032720  lea edx,[rax+0x1]
40032723  shl rax,0x4
40032727  mov DWORD PTR [rsp+0x120],edx
4003272E  add r12,rax
40032731  cmp BYTE PTR [rbx+0xe],0x0
40032735  jne 0x140033400 <Benchmark()+8832>
4003273B  mov eax,DWORD PTR [rbx]
4003273D  mov DWORD PTR [r12],eax
40032741  mov eax,DWORD PTR [rbx+0x4]
40032744  mov DWORD PTR [r12+0x4],eax
40032749  mov eax,DWORD PTR [rbx+0x8]
4003274C  mov DWORD PTR [r12+0x8],eax
40032751  mov eax,DWORD PTR [rbx+0xc]
40032754  mov DWORD PTR [r12+0xc],eax
40032759  mov edi,DWORD PTR [rsp+0x138]
40032760  and esi,0x7fffffff
40032766  mov eax,DWORD PTR [rsp+0x13c]
4003276D  mov ebx,esi
4003276F  mov r12,QWORD PTR [rsp+0x130]
40032777  cmp edi,eax
40032779  jge 0x140033130 <Benchmark()+8112>
4003277F  lea eax,[rdi+0x1]
40032782  mov DWORD PTR [rsp+0x138],eax
40032789  movsxd rax,edi
4003278C  mov DWORD PTR [r12+rax*4],esi
40032790  mov eax,DWORD PTR [rsp+0x158]
40032797  cmp DWORD PTR [rsp+0x138],eax
4003279E  jg 0x140032c42 <Benchmark()+6850>
400327A4  mov rdx,QWORD PTR [rsp+0x150]
400327AC  imul ebx,ebx,0xa3613c16
400327B2  bswap ebx
400327B4  and eax,ebx
400327B6  mov rbx,QWORD PTR [rsp+0x140]
400327BE  lea rsi,[rdx+rax*4]
400327C2  movsxd rax,DWORD PTR [rsp+0x148]
400327CA  mov edx,DWORD PTR [rsp+0x14c]
400327D1  cmp eax,edx
400327D3  jge 0x140033360 <Benchmark()+8672>
400327D9  lea edx,[rax+0x1]
400327DC  mov DWORD PTR [rsp+0x148],edx
400327E3  mov edx,DWORD PTR [rsi]
400327E5  lea rax,[rbx+rax*8]
400327E9  test edx,edx
400327EB  js 0x1400332e0 <Benchmark()+8544>
400327F1  movsxd rcx,edx
400327F4  mov DWORD PTR [rax],edx
400327F6  lea rcx,[rbx+rcx*8]
400327FA  mov edx,DWORD PTR [rcx+0x4]
400327FD  mov DWORD PTR [rax+0x4],edx
40032800  mov DWORD PTR [rcx+0x4],edi
40032803  movsxd rax,DWORD PTR [rax+0x4]
40032807  mov DWORD PTR [rbx+rax*8],edi
4003280A  add rbp,0x10
4003280E  cmp rbp,0x13880
40032815  je 0x140032c61 <Benchmark()+6881>
4003281B  mov rbx,QWORD PTR [rsp+0x100]
40032823  add rbx,rbp
40032826  cmp BYTE PTR [rbx+0xe],0x0
4003282A  jne 0x140033110 <Benchmark()+8080>
40032830  mov eax,DWORD PTR [rbx]
40032832  xor eax,0xe2f62ff2
40032837  mov esi,eax
40032839  shl esi,0x4
4003283C  add esi,eax
4003283E  mov eax,DWORD PTR [rbx+0x4]
40032841  xor eax,esi
40032843  mov esi,eax
40032845  shl esi,0x4
40032848  add esi,eax
4003284A  xor esi,DWORD PTR [rbx+0x8]
4003284D  mov eax,esi
4003284F  shl eax,0x4
40032852  add esi,eax
40032854  xor esi,DWORD PTR [rbx+0xc]
40032857  movsxd rax,DWORD PTR [rsp+0x120]
4003285F  mov edx,DWORD PTR [rsp+0x124]
40032866  mov r12,QWORD PTR [rsp+0x118]
4003286E  cmp eax,edx
40032870  jl 0x140032720 <Benchmark()+5536>
40032876  cmp edx,0x7fffffff
4003287C  je 0x140033500 <Benchmark()+9088>
40032882  cmp edx,0x55555553
40032888  jg 0x140033213 <Benchmark()+8339>
4003288E  mov edi,edx
40032890  sar edi,1
40032892  add edi,edx
40032894  add edx,0x1
40032897  cmp edi,edx
40032899  cmovl edi,edx
4003289C  xor eax,eax
4003289E  xor r9d,r9d
400328A1  movsxd r13,edi
400328A4  shl r13,0x4
400328A8  test edi,edi
400328AA  mov QWORD PTR [rsp+0xd0],r13
400328B2  jne 0x140032bf0 <Benchmark()+6768>
400328B8  add edi,eax
400328BA  movsxd r8,DWORD PTR [rsp+0x120]
400328C2  mov DWORD PTR [rsp+0x124],edi
400328C9  mov rdx,QWORD PTR [rsp+0x118]
400328D1  mov rax,r8
400328D4  shl r8,0x4
400328D8  test rdx,rdx
400328DB  je 0x1400328f7 <Benchmark()+6007>
400328DD  mov rcx,r9
400328E0  call 0x140002d78 <memcpy>
400328E5  movsxd r8,DWORD PTR [rsp+0x120]
400328ED  mov r9,rax
400328F0  mov rax,r8
400328F3  shl r8,0x4
400328F7  mov QWORD PTR [rsp+0x118],r9
400328FF  lea rdi,[r9+r8*1]
40032903  add eax,0x1
40032906  mov DWORD PTR [rsp+0x120],eax
4003290D  cmp BYTE PTR [rbx+0xe],0x0
40032911  jne 0x140033320 <Benchmark()+8608>
40032917  mov eax,DWORD PTR [rbx]
40032919  mov DWORD PTR [rdi],eax
4003291B  mov eax,DWORD PTR [rbx+0x4]
4003291E  mov DWORD PTR [rdi+0x4],eax
40032921  mov eax,DWORD PTR [rbx+0x8]
40032924  mov DWORD PTR [rdi+0x8],eax
40032927  mov eax,DWORD PTR [rbx+0xc]
4003292A  mov DWORD PTR [rdi+0xc],eax
4003292D  test r12,r12
40032930  je 0x140032759 <Benchmark()+5593>
40032936  mov rcx,r12
40032939  call 0x14003fa40 <Upp::MemoryFree(void*)>
4003293E  jmp 0x140032759 <Benchmark()+5593>
40032943  cmp edx,0x7fffffff
40032949  je 0x140032b40 <Benchmark()+6592>
4003294F  cmp edx,0x55555553
40032955  jg 0x140032a30 <Benchmark()+6320>
4003295B  mov r12d,edx
4003295E  sar r12d,1
40032961  add r12d,edx
40032964  add edx,0x1
40032967  cmp r12d,edx
4003296A  cmovl r12d,edx
4003296E  xor eax,eax
40032970  xor r9d,r9d
40032973  movsxd r13,r12d
40032976  shl r13,0x3
4003297A  test r12d,r12d
4003297D  mov QWORD PTR [rsp+0xa8],r13
40032985  jne 0x140032b90 <Benchmark()+6672>
4003298B  add r12d,eax
4003298E  mov rdx,QWORD PTR [rsp+0x118]
40032996  mov DWORD PTR [rsp+0x124],r12d
4003299E  test rdx,rdx
400329A1  je 0x1400329ba <Benchmark()+6202>
400329A3  movsxd r8,DWORD PTR [rsp+0x120]
400329AB  mov rcx,r9
400329AE  shl r8,0x3
400329B2  call 0x140002d78 <memcpy>
400329B7  mov r9,rax
400329BA  mov rcx,rbp
400329BD  mov QWORD PTR [rsp+0x118],r9
400329C5  call 0x14003fa40 <Upp::MemoryFree(void*)>
400329CA  mov rbp,QWORD PTR [rsp+0x118]
400329D2  movsxd rax,DWORD PTR [rsp+0x120]
400329DA  jmp 0x1400321b1 <Benchmark()+4145>
400329DF  nop 
400329E0  movsxd rdx,DWORD PTR [rax+0x4]
400329E4  mov DWORD PTR [rbp+rdx*8+0x4],esi
400329E8  mov DWORD PTR [rax+0x4],esi
400329EB  jmp 0x1400321f4 <Benchmark()+4212>
400329F0  movabs rax,0x7fffffff0
400329FA  mov rcx,r14
400329FD  mov QWORD PTR [rsp+0xa0],rax
40032A05  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032A0A  mov r9,rax
40032A0D  mov ebx,0x7fffffff
40032A12  jmp 0x140032273 <Benchmark()+4339>
40032A17  nop WORD PTR [rax+rax*1+0x0]
40032A20  mov rdx,rsi
40032A23  mov rcx,rbp
40032A26  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
40032A2B  jmp 0x140032152 <Benchmark()+4050>
40032A30  movabs rax,0x3fffffff8
40032A3A  lea rcx,[rsp+0xa8]
40032A42  mov QWORD PTR [rsp+0xa8],rax
40032A4A  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032A4F  mov r9,rax
40032A52  mov r12d,0x7fffffff
40032A58  jmp 0x14003298e <Benchmark()+6158>
40032A5D  nop DWORD PTR [rax]
40032A60  mov rdx,rsi
40032A63  mov rcx,rbx
40032A66  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
40032A6B  jmp 0x1400322e6 <Benchmark()+4454>
40032A70  cmp eax,0x7fffffff
40032A75  je 0x140032bb4 <Benchmark()+6708>
40032A7B  cmp eax,0x55555553
40032A80  jg 0x140032b60 <Benchmark()+6624>
40032A86  mov r12d,eax
40032A89  sar r12d,1
40032A8C  add r12d,eax
40032A8F  add eax,0x1
40032A92  cmp r12d,eax
40032A95  cmovl r12d,eax
40032A99  xor eax,eax
40032A9B  xor r9d,r9d
40032A9E  movsxd r14,r12d
40032AA1  shl r14,0x2
40032AA5  test r12d,r12d
40032AA8  mov QWORD PTR [rsp+0x98],r14
40032AB0  jne 0x140032bd0 <Benchmark()+6736>
40032AB6  add r12d,eax
40032AB9  movsxd r8,DWORD PTR [rsp+0x120]
40032AC1  mov DWORD PTR [rsp+0x124],r12d
40032AC9  mov rdx,QWORD PTR [rsp+0x118]
40032AD1  mov rax,r8
40032AD4  shl r8,0x2
40032AD8  test rdx,rdx
40032ADB  je 0x140032af7 <Benchmark()+6519>
40032ADD  mov rcx,r9
40032AE0  call 0x140002d78 <memcpy>
40032AE5  movsxd r8,DWORD PTR [rsp+0x120]
40032AED  mov r9,rax
40032AF0  mov rax,r8
40032AF3  shl r8,0x2
40032AF7  add eax,0x1
40032AFA  test rbp,rbp
40032AFD  mov QWORD PTR [rsp+0x118],r9
40032B05  mov DWORD PTR [rsp+0x120],eax
40032B0C  mov DWORD PTR [r9+r8*1],edi
40032B10  je 0x140032047 <Benchmark()+3783>
40032B16  mov rcx,rbp
40032B19  call 0x14003fa40 <Upp::MemoryFree(void*)>
40032B1E  jmp 0x140032047 <Benchmark()+3783>
40032B23  lea rcx,[rip+0x13b4e6]        # 0x14016e010
40032B2A  call 0x1400b9640 <Upp::Panic(char const*)>
40032B2F  mov edx,DWORD PTR [rsp+0x13c]
40032B36  jmp 0x14003223b <Benchmark()+4283>
40032B3B  nop DWORD PTR [rax+rax*1+0x0]
40032B40  lea rcx,[rip+0x13b4c9]        # 0x14016e010
40032B47  call 0x1400b9640 <Upp::Panic(char const*)>
40032B4C  mov edx,DWORD PTR [rsp+0x124]
40032B53  jmp 0x14003294f <Benchmark()+6095>
40032B58  nop DWORD PTR [rax+rax*1+0x0]
40032B60  movabs rax,0x1fffffffc
40032B6A  mov rcx,r15
40032B6D  mov QWORD PTR [rsp+0x98],rax
40032B75  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032B7A  mov r9,rax
40032B7D  mov r12d,0x7fffffff
40032B83  jmp 0x140032ab9 <Benchmark()+6457>
40032B88  nop DWORD PTR [rax+rax*1+0x0]
40032B90  lea rcx,[rsp+0xa8]
40032B98  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032B9D  mov r9,rax
40032BA0  mov rax,QWORD PTR [rsp+0xa8]
40032BA8  sub rax,r13
40032BAB  shr rax,0x3
40032BAF  jmp 0x14003298b <Benchmark()+6155>
40032BB4  lea rcx,[rip+0x13b455]        # 0x14016e010
40032BBB  call 0x1400b9640 <Upp::Panic(char const*)>
40032BC0  mov eax,DWORD PTR [rsp+0x124]
40032BC7  jmp 0x140032a7b <Benchmark()+6395>
40032BCC  nop DWORD PTR [rax+0x0]
40032BD0  mov rcx,r15
40032BD3  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032BD8  mov r9,rax
40032BDB  mov rax,QWORD PTR [rsp+0x98]
40032BE3  sub rax,r14
40032BE6  shr rax,0x2
40032BEA  jmp 0x140032ab6 <Benchmark()+6454>
40032BEF  nop 
40032BF0  lea rcx,[rsp+0xd0]
40032BF8  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40032BFD  mov r9,rax
40032C00  mov rax,QWORD PTR [rsp+0xd0]
40032C08  sub rax,r13
40032C0B  shr rax,0x4
40032C0F  jmp 0x1400328b8 <Benchmark()+5944>
40032C14  mov rdx,rsi
40032C17  call 0x14014ba00 <Upp::String0::LEqual(Upp::String0 const&) const>
40032C1C  test eax,eax
40032C1E  sete al
40032C21  jmp 0x14003245b <Benchmark()+4827>
40032C26  nop WORD PTR cs:[rax+rax*1+0x0]
40032C30  mov rdx,rbx
40032C33  call 0x14014ba00 <Upp::String0::LEqual(Upp::String0 const&) const>
40032C38  test eax,eax
40032C3A  sete al
40032C3D  jmp 0x1400325a2 <Benchmark()+5154>
40032C42  mov rax,QWORD PTR [rsp+0x20]
40032C47  lea rcx,[rax+0x18]
40032C4B  call 0x140108e70 <Upp::HashBase::Reindex()>
40032C50  add rbp,0x10
40032C54  cmp rbp,0x13880
40032C5B  jne 0x14003281b <Benchmark()+5787>
40032C61  mov eax,DWORD PTR [r14]
40032C64  lea rcx,[rip+0x1838d5]        # 0x1401b6540
40032C6B  mov edx,r15d
40032C6E  lea r8d,[rax-0x1]
40032C72  mov DWORD PTR [r14],r8d
40032C75  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032C7A  movzx eax,BYTE PTR [rip+0x18381f]        # 0x1401b64a0
40032C81  test al,al
40032C83  jne 0x140032c99 <Benchmark()+6937>
40032C85  lea rcx,[rip+0x183814]        # 0x1401b64a0
40032C8C  call 0x140157920 <__cxa_guard_acquire>
40032C91  test eax,eax
40032C93  jne 0x140033fc0 <Benchmark()+11840>
40032C99  lea rcx,[rip+0x1704c0]        # 0x1401a3160 <__emutls_v._ZZ9BenchmarkvE16sTmStatNesting96>
40032CA0  call 0x140002b00 <__emutls_get_address>
40032CA5  mov r14,rax
40032CA8  call QWORD PTR [rip+0x157f5a]        # 0x14018ac08 <__imp_timeGetTime>
40032CAE  add DWORD PTR [r14],0x1
40032CB2  mov r15d,eax
40032CB5  xor edi,edi
40032CB7  mov r13d,0xffffffff
40032CBD  nop DWORD PTR [rax]
40032CC0  mov rbx,QWORD PTR [rsp+0x100]
40032CC8  add rbx,rdi
40032CCB  cmp BYTE PTR [rbx+0xe],0x0
40032CCF  jne 0x1400339b0 <Benchmark()+10288>
40032CD5  mov eax,DWORD PTR [rbx]
40032CD7  xor eax,0xe2f62ff2
40032CDC  mov edx,eax
40032CDE  shl edx,0x4
40032CE1  add edx,eax
40032CE3  xor edx,DWORD PTR [rbx+0x4]
40032CE6  mov eax,edx
40032CE8  shl eax,0x4
40032CEB  add eax,edx
40032CED  xor eax,DWORD PTR [rbx+0x8]
40032CF0  mov edx,eax
40032CF2  shl eax,0x4
40032CF5  add eax,edx
40032CF7  xor eax,DWORD PTR [rbx+0xc]
40032CFA  and eax,0x7fffffff
40032CFF  mov rdx,QWORD PTR [rsp+0x150]
40032D07  imul eax,eax,0xa3613c16
40032D0D  bswap eax
40032D0F  and eax,DWORD PTR [rsp+0x158]
40032D16  mov ebp,DWORD PTR [rdx+rax*4]
40032D19  test ebp,ebp
40032D1B  js 0x1400339a0 <Benchmark()+10272>
40032D21  mov esi,ebp
40032D23  jmp 0x140032d51 <Benchmark()+7121>
40032D25  mov rcx,QWORD PTR [rbx]
40032D28  mov rax,QWORD PTR [rbx+0x8]
40032D2C  xor rcx,QWORD PTR [rdx]
40032D2F  xor rax,QWORD PTR [rdx+0x8]
40032D33  or rcx,rax
40032D36  sete al
40032D39  test al,al
40032D3B  jne 0x140032d80 <Benchmark()+7168>
40032D3D  mov rax,QWORD PTR [rsp+0x140]
40032D45  mov esi,DWORD PTR [rax+r12*8]
40032D49  cmp ebp,esi
40032D4B  je 0x1400339a0 <Benchmark()+10272>
40032D51  movsxd r12,esi
40032D54  movzx eax,BYTE PTR [rbx+0xe]
40032D58  mov rdx,r12
40032D5B  shl rdx,0x4
40032D5F  add rdx,QWORD PTR [rsp+0x118]
40032D67  or al,BYTE PTR [rdx+0xe]
40032D6A  je 0x140032d25 <Benchmark()+7077>
40032D6C  mov rcx,rbx
40032D6F  call 0x14014ba00 <Upp::String0::LEqual(Upp::String0 const&) const>
40032D74  test eax,eax
40032D76  sete al
40032D79  test al,al
40032D7B  je 0x140032d3d <Benchmark()+7101>
40032D7D  nop DWORD PTR [rax]
40032D80  add DWORD PTR [rip+0x18369a],esi        # 0x1401b6420
40032D86  add rdi,0x10
40032D8A  cmp rdi,0x13880
40032D91  jne 0x140032cc0 <Benchmark()+6976>
40032D97  mov eax,DWORD PTR [r14]
40032D9A  lea rcx,[rip+0x18371f]        # 0x1401b64c0
40032DA1  mov edx,r15d
40032DA4  lea r8d,[rax-0x1]
40032DA8  mov DWORD PTR [r14],r8d
40032DAB  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032DB0  movzx eax,BYTE PTR [rip+0x183671]        # 0x1401b6428
40032DB7  test al,al
40032DB9  jne 0x140032dcf <Benchmark()+7247>
40032DBB  lea rcx,[rip+0x183666]        # 0x1401b6428
40032DC2  call 0x140157920 <__cxa_guard_acquire>
40032DC7  test eax,eax
40032DC9  jne 0x140034020 <Benchmark()+11936>
40032DCF  lea rcx,[rip+0x1703aa]        # 0x1401a3180 <__emutls_v._ZZ9BenchmarkvE17sTmStatNesting102>
40032DD6  call 0x140002b00 <__emutls_get_address>
40032DDB  mov rdi,rax
40032DDE  mov QWORD PTR [rsp+0x30],rax
40032DE3  call QWORD PTR [rip+0x157e1f]        # 0x14018ac08 <__imp_timeGetTime>
40032DE9  add DWORD PTR [rdi],0x1
40032DEC  mov DWORD PTR [rsp+0x28],eax
40032DF0  xor ebp,ebp
40032DF2  mov ebx,ebp
40032DF4  sar ebx,0x2
40032DF7  movsxd rbx,ebx
40032DFA  shl rbx,0x4
40032DFE  add rbx,QWORD PTR [rsp+0x100]
40032E06  cmp BYTE PTR [rbx+0xe],0x0
40032E0A  jne 0x1400339c0 <Benchmark()+10304>
40032E10  mov esi,DWORD PTR [rbx]
40032E12  xor esi,0xe2f62ff2
40032E18  mov eax,esi
40032E1A  shl eax,0x4
40032E1D  add eax,esi
40032E1F  xor eax,DWORD PTR [rbx+0x4]
40032E22  mov esi,eax
40032E24  shl eax,0x4
40032E27  add eax,esi
40032E29  xor eax,DWORD PTR [rbx+0x8]
40032E2C  mov esi,eax
40032E2E  shl esi,0x4
40032E31  add esi,eax
40032E33  xor esi,DWORD PTR [rbx+0xc]
40032E36  and esi,0x7fffffff
40032E3C  mov rdx,QWORD PTR [rsp+0x150]
40032E44  imul r12d,esi,0xa3613c16
40032E4B  mov eax,r12d
40032E4E  bswap eax
40032E50  and eax,DWORD PTR [rsp+0x158]
40032E57  mov r13d,DWORD PTR [rdx+rax*4]
40032E5B  test r13d,r13d
40032E5E  js 0x140033880 <Benchmark()+9984>
40032E64  mov edi,r13d
40032E67  jmp 0x140032e9d <Benchmark()+7453>
40032E69  nop DWORD PTR [rax+0x0]
40032E70  mov rcx,QWORD PTR [rbx]
40032E73  mov rax,QWORD PTR [rbx+0x8]
40032E77  xor rcx,QWORD PTR [rdx]
40032E7A  xor rax,QWORD PTR [rdx+0x8]
40032E7E  or rcx,rax
40032E81  sete al
40032E84  test al,al
40032E86  jne 0x140032ec9 <Benchmark()+7497>
40032E88  mov rax,QWORD PTR [rsp+0x140]
40032E90  mov edi,DWORD PTR [rax+r14*8]
40032E94  cmp r13d,edi
40032E97  je 0x140033880 <Benchmark()+9984>
40032E9D  movsxd r14,edi
40032EA0  movzx eax,BYTE PTR [rbx+0xe]
40032EA4  mov rdx,r14
40032EA7  shl rdx,0x4
40032EAB  add rdx,QWORD PTR [rsp+0x118]
40032EB3  or al,BYTE PTR [rdx+0xe]
40032EB6  je 0x140032e70 <Benchmark()+7408>
40032EB8  mov rcx,rbx
40032EBB  call 0x14014ba00 <Upp::String0::LEqual(Upp::String0 const&) const>
40032EC0  test eax,eax
40032EC2  sete al
40032EC5  test al,al
40032EC7  je 0x140032e88 <Benchmark()+7432>
40032EC9  test edi,edi
40032ECB  js 0x140033880 <Benchmark()+9984>
40032ED1  cmp edi,ebp
40032ED3  je 0x140033985 <Benchmark()+10245>
40032ED9  add ebp,0x1
40032EDC  cmp ebp,0x1388
40032EE2  jne 0x140032df2 <Benchmark()+7282>
40032EE8  mov rax,QWORD PTR [rsp+0x30]
40032EED  lea rcx,[rip+0x18354c]        # 0x1401b6440
40032EF4  mov edx,DWORD PTR [rsp+0x28]
40032EF8  mov edi,DWORD PTR [rax]
40032EFA  lea r8d,[rdi-0x1]
40032EFE  mov DWORD PTR [rsp+0x30],edi
40032F02  mov DWORD PTR [rax],r8d
40032F05  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40032F0A  mov rax,QWORD PTR [rsp+0x20]
40032F0F  lea rcx,[rax+0x18]
40032F13  call 0x14010a320 <Upp::HashBase::~HashBase()>
40032F18  mov rbx,QWORD PTR [rsp+0x118]
40032F20  test rbx,rbx
40032F23  je 0x140032f68 <Benchmark()+7656>
40032F25  movsxd rax,DWORD PTR [rsp+0x120]
40032F2D  test eax,eax
40032F2F  js 0x140032f60 <Benchmark()+7648>
40032F31  shl rax,0x4
40032F35  lea rsi,[rbx+rax*1]
40032F39  cmp rbx,rsi
40032F3C  je 0x140032f60 <Benchmark()+7648>
40032F3E  xchg ax,ax
40032F40  cmp BYTE PTR [rbx+0xe],0x0
40032F44  jne 0x140033d70 <Benchmark()+11248>
40032F4A  add rbx,0x10
40032F4E  cmp rsi,rbx
40032F51  jne 0x140032f40 <Benchmark()+7616>
40032F53  mov rbx,QWORD PTR [rsp+0x118]
40032F5B  test rbx,rbx
40032F5E  je 0x140032f68 <Benchmark()+7656>
40032F60  mov rcx,rbx
40032F63  call 0x14003fa40 <Upp::MemoryFree(void*)>
40032F68  sub DWORD PTR [rsp+0x44],0x1
40032F6D  jne 0x140031247 <Benchmark()+199>
40032F73  call 0x1400d69d0 <Upp::VppLog()>
40032F78  lea rdx,[rip+0x13b172]        # 0x14016e0f1
40032F7F  mov rcx,rax
40032F82  mov rbx,rax
40032F85  call 0x1400ce070 <Upp::Stream::Put(char const*)>
40032F8A  lea rdx,[rip+0x13b164]        # 0x14016e0f5
40032F91  mov rcx,rbx
40032F94  call 0x1400ce070 <Upp::Stream::Put(char const*)>
40032F99  mov edx,DWORD PTR [rip+0x183481]        # 0x1401b6420
40032F9F  mov rcx,QWORD PTR [rsp+0x20]
40032FA4  call 0x140071600 <Upp::FormatInteger(int)>
40032FA9  cmp BYTE PTR [rsp+0x11e],0x0
40032FB1  jne 0x1400341a0 <Benchmark()+12320>
40032FB7  movsx r8d,BYTE PTR [rsp+0x11f]
40032FC0  test r8d,r8d
40032FC3  je 0x1400341c3 <Benchmark()+12355>
40032FC9  mov rdx,QWORD PTR [rsp+0x20]
40032FCE  mov rcx,QWORD PTR [rbx+0x18]
40032FD2  movsxd rsi,r8d
40032FD5  lea rax,[rcx+rsi*1]
40032FD9  cmp QWORD PTR [rbx+0x28],rax
40032FDD  jae 0x140034245 <Benchmark()+12485>
40032FE3  mov rax,QWORD PTR [rbx]
40032FE6  mov rcx,rbx
40032FE9  call QWORD PTR [rax+0x18]
40032FEC  cmp BYTE PTR [rsp+0x11e],0x0
40032FF4  je 0x1400341c3 <Benchmark()+12355>
40032FFA  jmp 0x1400341b9 <Benchmark()+12345>
40032FFF  nop 
40033000  cmp edx,0x7fffffff
40033006  je 0x140033632 <Benchmark()+9394>
4003300C  cmp edx,0x55555553
40033012  jg 0x1400332f0 <Benchmark()+8560>
40033018  mov r12d,edx
4003301B  sar r12d,1
4003301E  add r12d,edx
40033021  add edx,0x1
40033024  cmp r12d,edx
40033027  cmovl r12d,edx
4003302B  xor r9d,r9d
4003302E  movsxd rax,r12d
40033031  shl rax,0x4
40033035  mov QWORD PTR [rsp+0x30],rax
4003303A  mov QWORD PTR [rsp+0xc8],rax
40033042  xor eax,eax
40033044  test r12d,r12d
40033047  jne 0x140033670 <Benchmark()+9456>
4003304D  add r12d,eax
40033050  movsxd r8,DWORD PTR [rsp+0x138]
40033058  mov DWORD PTR [rsp+0x13c],r12d
40033060  mov rdx,QWORD PTR [rsp+0x130]
40033068  mov rax,r8
4003306B  shl r8,0x4
4003306F  test rdx,rdx
40033072  je 0x14003308e <Benchmark()+7950>
40033074  mov rcx,r9
40033077  call 0x140002d78 <memcpy>
4003307C  movsxd r8,DWORD PTR [rsp+0x138]
40033084  mov r9,rax
40033087  mov rax,r8
4003308A  shl r8,0x4
4003308E  mov QWORD PTR [rsp+0x130],r9
40033096  lea r12,[r9+r8*1]
4003309A  add eax,0x1
4003309D  mov DWORD PTR [rsp+0x138],eax
400330A4  cmp BYTE PTR [rbx+0xe],0x0
400330A8  jne 0x1400334b0 <Benchmark()+9008>
400330AE  mov eax,DWORD PTR [rbx]
400330B0  mov DWORD PTR [r12],eax
400330B4  mov eax,DWORD PTR [rbx+0x4]
400330B7  mov DWORD PTR [r12+0x4],eax
400330BC  mov eax,DWORD PTR [rbx+0x8]
400330BF  mov DWORD PTR [r12+0x8],eax
400330C4  mov eax,DWORD PTR [rbx+0xc]
400330C7  mov DWORD PTR [r12+0xc],eax
400330CC  test r14,r14
400330CF  je 0x14003263b <Benchmark()+5307>
400330D5  mov rcx,r14
400330D8  call 0x14003fa40 <Upp::MemoryFree(void*)>
400330DD  jmp 0x14003263b <Benchmark()+5307>
400330E2  add DWORD PTR [rip+0x183337],0x1        # 0x1401b6420
400330E9  add ebp,0x1
400330EC  cmp ebp,0x1388
400330F2  jne 0x1400324e1 <Benchmark()+4961>
400330F8  jmp 0x14003267f <Benchmark()+5375>
400330FD  nop DWORD PTR [rax]
40033100  mov rcx,rsi
40033103  call 0x14014b800 <Upp::String0::LHashValue() const>
40033108  mov ebx,eax
4003310A  jmp 0x1400323de <Benchmark()+4702>
4003310F  nop 
40033110  mov rcx,rbx
40033113  call 0x14014b800 <Upp::String0::LHashValue() const>
40033118  mov esi,eax
4003311A  jmp 0x140032857 <Benchmark()+5847>
4003311F  nop 
40033120  mov rcx,rbx
40033123  call 0x14014b800 <Upp::String0::LHashValue() const>
40033128  mov esi,eax
4003312A  jmp 0x140032525 <Benchmark()+5029>
4003312F  nop 
40033130  cmp eax,0x7fffffff
40033135  je 0x140033650 <Benchmark()+9424>
4003313B  cmp eax,0x55555553
40033140  jg 0x140033330 <Benchmark()+8624>
40033146  mov esi,eax
40033148  sar esi,1
4003314A  add esi,eax
4003314C  add eax,0x1
4003314F  cmp esi,eax
40033151  cmovl esi,eax
40033154  xor eax,eax
40033156  xor r9d,r9d
40033159  movsxd r13,esi
4003315C  shl r13,0x2
40033160  test esi,esi
40033162  mov QWORD PTR [rsp+0xd8],r13
4003316A  jne 0x1400331e0 <Benchmark()+8288>
4003316C  add esi,eax
4003316E  movsxd r8,DWORD PTR [rsp+0x138]
40033176  mov DWORD PTR [rsp+0x13c],esi
4003317D  mov rdx,QWORD PTR [rsp+0x130]
40033185  mov rax,r8
40033188  shl r8,0x2
4003318C  test rdx,rdx
4003318F  je 0x1400331ab <Benchmark()+8235>
40033191  mov rcx,r9
40033194  call 0x140002d78 <memcpy>
40033199  movsxd r8,DWORD PTR [rsp+0x138]
400331A1  mov r9,rax
400331A4  mov rax,r8
400331A7  shl r8,0x2
400331AB  add eax,0x1
400331AE  test r12,r12
400331B1  mov QWORD PTR [rsp+0x130],r9
400331B9  mov DWORD PTR [rsp+0x138],eax
400331C0  mov DWORD PTR [r9+r8*1],ebx
400331C4  je 0x140032790 <Benchmark()+5648>
400331CA  mov rcx,r12
400331CD  call 0x14003fa40 <Upp::MemoryFree(void*)>
400331D2  jmp 0x140032790 <Benchmark()+5648>
400331D7  nop WORD PTR [rax+rax*1+0x0]
400331E0  lea rcx,[rsp+0xd8]
400331E8  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
400331ED  mov r9,rax
400331F0  mov rax,QWORD PTR [rsp+0xd8]
400331F8  sub rax,r13
400331FB  shr rax,0x2
400331FF  jmp 0x14003316c <Benchmark()+8172>
40033204  mov rcx,QWORD PTR [rsp+0x20]
40033209  call 0x140035a90 <New::HashBase::GrowMap()>
4003320E  jmp 0x140032668 <Benchmark()+5352>
40033213  movabs rax,0x7fffffff0
4003321D  lea rcx,[rsp+0xd0]
40033225  mov QWORD PTR [rsp+0xd0],rax
4003322D  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033232  mov r9,rax
40033235  mov edi,0x7fffffff
4003323A  jmp 0x1400328ba <Benchmark()+5946>
4003323F  nop 
40033240  cmp edx,0x7fffffff
40033246  je 0x140033730 <Benchmark()+9648>
4003324C  cmp edx,0x55555553
40033252  jg 0x1400334d0 <Benchmark()+9040>
40033258  mov r13d,edx
4003325B  sar r13d,1
4003325E  add r13d,edx
40033261  add edx,0x1
40033264  cmp r13d,edx
40033267  cmovl r13d,edx
4003326B  xor eax,eax
4003326D  xor r9d,r9d
40033270  movsxd r14,r13d
40033273  shl r14,0x3
40033277  test r13d,r13d
4003327A  mov QWORD PTR [rsp+0xc0],r14
40033282  jne 0x140033750 <Benchmark()+9680>
40033288  add r13d,eax
4003328B  mov rdx,QWORD PTR [rsp+0x118]
40033293  mov DWORD PTR [rsp+0x124],r13d
4003329B  test rdx,rdx
4003329E  je 0x1400332b7 <Benchmark()+8503>
400332A0  movsxd r8,DWORD PTR [rsp+0x120]
400332A8  mov rcx,r9
400332AB  shl r8,0x3
400332AF  call 0x140002d78 <memcpy>
400332B4  mov r9,rax
400332B7  mov rcx,r12
400332BA  mov QWORD PTR [rsp+0x118],r9
400332C2  call 0x14003fa40 <Upp::MemoryFree(void*)>
400332C7  mov r12,QWORD PTR [rsp+0x118]
400332CF  movsxd rax,DWORD PTR [rsp+0x120]
400332D7  jmp 0x1400325d9 <Benchmark()+5209>
400332DC  nop DWORD PTR [rax+0x0]
400332E0  mov DWORD PTR [rax],edi
400332E2  mov DWORD PTR [rax+0x4],edi
400332E5  mov DWORD PTR [rsi],edi
400332E7  jmp 0x14003280a <Benchmark()+5770>
400332EC  nop DWORD PTR [rax+0x0]
400332F0  movabs rax,0x7fffffff0
400332FA  mov rcx,QWORD PTR [rsp+0x28]
400332FF  mov QWORD PTR [rsp+0xc8],rax
40033307  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003330C  mov r9,rax
4003330F  mov r12d,0x7fffffff
40033315  jmp 0x140033050 <Benchmark()+7888>
4003331A  nop WORD PTR [rax+rax*1+0x0]
40033320  mov rdx,rbx
40033323  mov rcx,rdi
40033326  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
4003332B  jmp 0x14003292d <Benchmark()+6061>
40033330  movabs rax,0x1fffffffc
4003333A  lea rcx,[rsp+0xd8]
40033342  mov QWORD PTR [rsp+0xd8],rax
4003334A  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003334F  mov r9,rax
40033352  mov esi,0x7fffffff
40033357  jmp 0x14003316e <Benchmark()+8174>
4003335C  nop DWORD PTR [rax+0x0]
40033360  cmp edx,0x7fffffff
40033366  je 0x1400337a1 <Benchmark()+9761>
4003336C  cmp edx,0x55555553
40033372  jg 0x140033520 <Benchmark()+9120>
40033378  mov r12d,edx
4003337B  sar r12d,1
4003337E  add r12d,edx
40033381  add edx,0x1
40033384  cmp r12d,edx
40033387  cmovl r12d,edx
4003338B  xor eax,eax
4003338D  xor r9d,r9d
40033390  movsxd r13,r12d
40033393  shl r13,0x3
40033397  test r12d,r12d
4003339A  mov QWORD PTR [rsp+0xe0],r13
400333A2  jne 0x1400337c0 <Benchmark()+9792>
400333A8  add r12d,eax
400333AB  mov rdx,QWORD PTR [rsp+0x140]
400333B3  mov DWORD PTR [rsp+0x14c],r12d
400333BB  test rdx,rdx
400333BE  je 0x1400333d7 <Benchmark()+8791>
400333C0  movsxd r8,DWORD PTR [rsp+0x148]
400333C8  mov rcx,r9
400333CB  shl r8,0x3
400333CF  call 0x140002d78 <memcpy>
400333D4  mov r9,rax
400333D7  mov rcx,rbx
400333DA  mov QWORD PTR [rsp+0x140],r9
400333E2  call 0x14003fa40 <Upp::MemoryFree(void*)>
400333E7  mov rbx,QWORD PTR [rsp+0x140]
400333EF  movsxd rax,DWORD PTR [rsp+0x148]
400333F7  jmp 0x1400327d9 <Benchmark()+5721>
400333FC  nop DWORD PTR [rax+0x0]
40033400  mov rdx,rbx
40033403  mov rcx,r12
40033406  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
4003340B  jmp 0x140032759 <Benchmark()+5593>
40033410  mov edi,DWORD PTR [rsp+0x120]
40033417  mov edx,DWORD PTR [rsp+0x124]
4003341E  movsxd rax,edi
40033421  cmp edi,edx
40033423  jge 0x140033693 <Benchmark()+9491>
40033429  lea edx,[rax+0x1]
4003342C  mov r14,QWORD PTR [rsp+0x130]
40033434  mov DWORD PTR [rsp+0x120],edx
4003343B  lea r13,[r12+rax*8]
4003343F  mov edx,DWORD PTR [rsp+0x13c]
40033446  movsxd rax,DWORD PTR [rsp+0x138]
4003344E  cmp eax,edx
40033450  jge 0x140033550 <Benchmark()+9168>
40033456  lea edx,[rax+0x1]
40033459  shl rax,0x4
4003345D  mov DWORD PTR [rsp+0x138],edx
40033464  cmp BYTE PTR [rbx+0xe],0x0
40033468  lea r12,[r14+rax*1]
4003346C  jne 0x1400337e4 <Benchmark()+9828>
40033472  mov eax,DWORD PTR [rbx]
40033474  mov DWORD PTR [r12],eax
40033478  mov eax,DWORD PTR [rbx+0x4]
4003347B  mov DWORD PTR [r12+0x4],eax
40033480  mov eax,DWORD PTR [rbx+0x8]
40033483  mov DWORD PTR [r12+0x8],eax
40033488  mov eax,DWORD PTR [rbx+0xc]
4003348B  mov DWORD PTR [r12+0xc],eax
40033490  test edi,edi
40033492  mov DWORD PTR [r13+0x0],esi
40033496  mov DWORD PTR [r13+0x4],0xffffffff
4003349E  je 0x140033204 <Benchmark()+8324>
400334A4  mov DWORD PTR [r15+0x4],edi
400334A8  mov DWORD PTR [r15],edi
400334AB  jmp 0x140032668 <Benchmark()+5352>
400334B0  mov rdx,rbx
400334B3  mov rcx,r12
400334B6  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
400334BB  jmp 0x1400330cc <Benchmark()+8012>
400334C0  mov rdx,rbx
400334C3  mov rcx,r14
400334C6  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
400334CB  jmp 0x14003263b <Benchmark()+5307>
400334D0  movabs rax,0x3fffffff8
400334DA  lea rcx,[rsp+0xc0]
400334E2  mov QWORD PTR [rsp+0xc0],rax
400334EA  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
400334EF  mov r9,rax
400334F2  mov r13d,0x7fffffff
400334F8  jmp 0x14003328b <Benchmark()+8459>
400334FD  nop DWORD PTR [rax]
40033500  lea rcx,[rip+0x13ab09]        # 0x14016e010
40033507  call 0x1400b9640 <Upp::Panic(char const*)>
4003350C  mov edx,DWORD PTR [rsp+0x124]
40033513  jmp 0x140032882 <Benchmark()+5890>
40033518  nop DWORD PTR [rax+rax*1+0x0]
40033520  movabs rax,0x3fffffff8
4003352A  lea rcx,[rsp+0xe0]
40033532  mov QWORD PTR [rsp+0xe0],rax
4003353A  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003353F  mov r9,rax
40033542  mov r12d,0x7fffffff
40033548  jmp 0x1400333ab <Benchmark()+8747>
4003354D  nop DWORD PTR [rax]
40033550  cmp edx,0x7fffffff
40033556  je 0x140033831 <Benchmark()+9905>
4003355C  cmp edx,0x55555553
40033562  jg 0x140033774 <Benchmark()+9716>
40033568  mov r12d,edx
4003356B  sar r12d,1
4003356E  add r12d,edx
40033571  add edx,0x1
40033574  cmp r12d,edx
40033577  cmovl r12d,edx
4003357B  xor r9d,r9d
4003357E  movsxd rax,r12d
40033581  shl rax,0x4
40033585  mov QWORD PTR [rsp+0x30],rax
4003358A  mov QWORD PTR [rsp+0xb8],rax
40033592  xor eax,eax
40033594  test r12d,r12d
40033597  jne 0x140033850 <Benchmark()+9936>
4003359D  add r12d,eax
400335A0  movsxd r8,DWORD PTR [rsp+0x138]
400335A8  mov DWORD PTR [rsp+0x13c],r12d
400335B0  mov rdx,QWORD PTR [rsp+0x130]
400335B8  mov rax,r8
400335BB  shl r8,0x4
400335BF  test rdx,rdx
400335C2  je 0x1400335de <Benchmark()+9310>
400335C4  mov rcx,r9
400335C7  call 0x140002d78 <memcpy>
400335CC  movsxd r8,DWORD PTR [rsp+0x138]
400335D4  mov r9,rax
400335D7  mov rax,r8
400335DA  shl r8,0x4
400335DE  mov QWORD PTR [rsp+0x130],r9
400335E6  lea r12,[r9+r8*1]
400335EA  add eax,0x1
400335ED  mov DWORD PTR [rsp+0x138],eax
400335F4  cmp BYTE PTR [rbx+0xe],0x0
400335F8  jne 0x140033821 <Benchmark()+9889>
400335FE  mov eax,DWORD PTR [rbx]
40033600  mov DWORD PTR [r12],eax
40033604  mov eax,DWORD PTR [rbx+0x4]
40033607  mov DWORD PTR [r12+0x4],eax
4003360C  mov eax,DWORD PTR [rbx+0x8]
4003360F  mov DWORD PTR [r12+0x8],eax
40033614  mov eax,DWORD PTR [rbx+0xc]
40033617  mov DWORD PTR [r12+0xc],eax
4003361C  test r14,r14
4003361F  je 0x140033490 <Benchmark()+8976>
40033625  mov rcx,r14
40033628  call 0x14003fa40 <Upp::MemoryFree(void*)>
4003362D  jmp 0x140033490 <Benchmark()+8976>
40033632  lea rcx,[rip+0x13a9d7]        # 0x14016e010
40033639  call 0x1400b9640 <Upp::Panic(char const*)>
4003363E  mov edx,DWORD PTR [rsp+0x13c]
40033645  jmp 0x14003300c <Benchmark()+7820>
4003364A  nop WORD PTR [rax+rax*1+0x0]
40033650  lea rcx,[rip+0x13a9b9]        # 0x14016e010
40033657  call 0x1400b9640 <Upp::Panic(char const*)>
4003365C  mov eax,DWORD PTR [rsp+0x13c]
40033663  jmp 0x14003313b <Benchmark()+8123>
40033668  nop DWORD PTR [rax+rax*1+0x0]
40033670  mov rcx,QWORD PTR [rsp+0x28]
40033675  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003367A  mov r9,rax
4003367D  mov rax,QWORD PTR [rsp+0xc8]
40033685  sub rax,QWORD PTR [rsp+0x30]
4003368A  shr rax,0x4
4003368E  jmp 0x14003304d <Benchmark()+7885>
40033693  cmp edx,0x7fffffff
40033699  je 0x140033db4 <Benchmark()+11316>
4003369F  cmp edx,0x55555553
400336A5  jg 0x1400337f4 <Benchmark()+9844>
400336AB  mov r13d,edx
400336AE  sar r13d,1
400336B1  add r13d,edx
400336B4  add edx,0x1
400336B7  cmp r13d,edx
400336BA  cmovl r13d,edx
400336BE  xor eax,eax
400336C0  xor r9d,r9d
400336C3  movsxd r14,r13d
400336C6  shl r14,0x3
400336CA  test r13d,r13d
400336CD  mov QWORD PTR [rsp+0xb0],r14
400336D5  jne 0x140033dfc <Benchmark()+11388>
400336DB  add r13d,eax
400336DE  mov rdx,QWORD PTR [rsp+0x118]
400336E6  mov DWORD PTR [rsp+0x124],r13d
400336EE  test rdx,rdx
400336F1  je 0x14003370a <Benchmark()+9610>
400336F3  movsxd r8,DWORD PTR [rsp+0x120]
400336FB  mov rcx,r9
400336FE  shl r8,0x3
40033702  call 0x140002d78 <memcpy>
40033707  mov r9,rax
4003370A  mov rcx,r12
4003370D  mov QWORD PTR [rsp+0x118],r9
40033715  call 0x14003fa40 <Upp::MemoryFree(void*)>
4003371A  mov r12,QWORD PTR [rsp+0x118]
40033722  movsxd rax,DWORD PTR [rsp+0x120]
4003372A  jmp 0x140033429 <Benchmark()+8873>
4003372F  nop 
40033730  lea rcx,[rip+0x13a8d9]        # 0x14016e010
40033737  call 0x1400b9640 <Upp::Panic(char const*)>
4003373C  mov edx,DWORD PTR [rsp+0x124]
40033743  jmp 0x14003324c <Benchmark()+8396>
40033748  nop DWORD PTR [rax+rax*1+0x0]
40033750  lea rcx,[rsp+0xc0]
40033758  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003375D  mov r9,rax
40033760  mov rax,QWORD PTR [rsp+0xc0]
40033768  sub rax,r14
4003376B  shr rax,0x3
4003376F  jmp 0x140033288 <Benchmark()+8456>
40033774  movabs rax,0x7fffffff0
4003377E  lea rcx,[rsp+0xb8]
40033786  mov QWORD PTR [rsp+0xb8],rax
4003378E  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033793  mov r9,rax
40033796  mov r12d,0x7fffffff
4003379C  jmp 0x1400335a0 <Benchmark()+9248>
400337A1  lea rcx,[rip+0x13a868]        # 0x14016e010
400337A8  call 0x1400b9640 <Upp::Panic(char const*)>
400337AD  mov edx,DWORD PTR [rsp+0x14c]
400337B4  jmp 0x14003336c <Benchmark()+8684>
400337B9  nop DWORD PTR [rax+0x0]
400337C0  lea rcx,[rsp+0xe0]
400337C8  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
400337CD  mov r9,rax
400337D0  mov rax,QWORD PTR [rsp+0xe0]
400337D8  sub rax,r13
400337DB  shr rax,0x3
400337DF  jmp 0x1400333a8 <Benchmark()+8744>
400337E4  mov rdx,rbx
400337E7  mov rcx,r12
400337EA  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
400337EF  jmp 0x140033490 <Benchmark()+8976>
400337F4  movabs rax,0x3fffffff8
400337FE  lea rcx,[rsp+0xb0]
40033806  mov QWORD PTR [rsp+0xb0],rax
4003380E  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033813  mov r9,rax
40033816  mov r13d,0x7fffffff
4003381C  jmp 0x1400336de <Benchmark()+9566>
40033821  mov rdx,rbx
40033824  mov rcx,r12
40033827  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
4003382C  jmp 0x14003361c <Benchmark()+9372>
40033831  lea rcx,[rip+0x13a7d8]        # 0x14016e010
40033838  call 0x1400b9640 <Upp::Panic(char const*)>
4003383D  mov edx,DWORD PTR [rsp+0x13c]
40033844  jmp 0x14003355c <Benchmark()+9180>
40033849  nop DWORD PTR [rax+0x0]
40033850  lea rcx,[rsp+0xb8]
40033858  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
4003385D  mov r9,rax
40033860  mov rax,QWORD PTR [rsp+0xb8]
40033868  sub rax,QWORD PTR [rsp+0x30]
4003386D  shr rax,0x4
40033871  jmp 0x14003359d <Benchmark()+9245>
40033876  nop WORD PTR cs:[rax+rax*1+0x0]
40033880  mov edi,DWORD PTR [rsp+0x120]
40033887  mov eax,DWORD PTR [rsp+0x124]
4003388E  mov r14,QWORD PTR [rsp+0x118]
40033896  cmp edi,eax
40033898  jge 0x1400339e3 <Benchmark()+10339>
4003389E  lea eax,[rdi+0x1]
400338A1  mov DWORD PTR [rsp+0x120],eax
400338A8  movsxd rax,edi
400338AB  shl rax,0x4
400338AF  add r14,rax
400338B2  cmp BYTE PTR [rbx+0xe],0x0
400338B6  jne 0x140033c50 <Benchmark()+10960>
400338BC  mov eax,DWORD PTR [rbx]
400338BE  mov DWORD PTR [r14],eax
400338C1  mov eax,DWORD PTR [rbx+0x4]
400338C4  mov DWORD PTR [r14+0x4],eax
400338C8  mov eax,DWORD PTR [rbx+0x8]
400338CB  mov DWORD PTR [r14+0x8],eax
400338CF  mov eax,DWORD PTR [rbx+0xc]
400338D2  mov DWORD PTR [r14+0xc],eax
400338D6  mov ebx,DWORD PTR [rsp+0x138]
400338DD  mov eax,DWORD PTR [rsp+0x13c]
400338E4  mov r14,QWORD PTR [rsp+0x130]
400338EC  cmp ebx,eax
400338EE  jge 0x140033ac0 <Benchmark()+10560>
400338F4  lea eax,[rbx+0x1]
400338F7  mov DWORD PTR [rsp+0x138],eax
400338FE  movsxd rax,ebx
40033901  mov DWORD PTR [r14+rax*4],esi
40033905  mov eax,DWORD PTR [rsp+0x158]
4003390C  cmp DWORD PTR [rsp+0x138],eax
40033913  jg 0x1400339d0 <Benchmark()+10320>
40033919  mov rdx,QWORD PTR [rsp+0x150]
40033921  bswap r12d
40033924  and eax,r12d
40033927  mov rsi,QWORD PTR [rsp+0x140]
4003392F  lea r12,[rdx+rax*4]
40033933  movsxd rax,DWORD PTR [rsp+0x148]
4003393B  mov edx,DWORD PTR [rsp+0x14c]
40033942  cmp eax,edx
40033944  jge 0x140033bb0 <Benchmark()+10800>
4003394A  lea edx,[rax+0x1]
4003394D  mov DWORD PTR [rsp+0x148],edx
40033954  mov edx,DWORD PTR [r12]
40033958  lea rax,[rsi+rax*8]
4003395C  test edx,edx
4003395E  js 0x140033ba0 <Benchmark()+10784>
40033964  movsxd rcx,edx
40033967  mov DWORD PTR [rax],edx
40033969  cmp edi,ebp
4003396B  lea rcx,[rsi+rcx*8]
4003396F  mov edx,DWORD PTR [rcx+0x4]
40033972  mov DWORD PTR [rax+0x4],edx
40033975  mov DWORD PTR [rcx+0x4],ebx
40033978  movsxd rax,DWORD PTR [rax+0x4]
4003397C  mov DWORD PTR [rsi+rax*8],ebx
4003397F  jne 0x140032ed9 <Benchmark()+7513>
40033985  add DWORD PTR [rip+0x182a94],0x1        # 0x1401b6420
4003398C  add ebp,0x1
4003398F  cmp ebp,0x1388
40033995  jne 0x140032df2 <Benchmark()+7282>
4003399B  jmp 0x140032ee8 <Benchmark()+7528>
400339A0  mov esi,r13d
400339A3  jmp 0x140032d80 <Benchmark()+7168>
400339A8  nop DWORD PTR [rax+rax*1+0x0]
400339B0  mov rcx,rbx
400339B3  call 0x14014b800 <Upp::String0::LHashValue() const>
400339B8  jmp 0x140032cfa <Benchmark()+7034>
400339BD  nop DWORD PTR [rax]
400339C0  mov rcx,rbx
400339C3  call 0x14014b800 <Upp::String0::LHashValue() const>
400339C8  mov esi,eax
400339CA  jmp 0x140032e36 <Benchmark()+7350>
400339CF  nop 
400339D0  mov rax,QWORD PTR [rsp+0x20]
400339D5  lea rcx,[rax+0x18]
400339D9  call 0x140108e70 <Upp::HashBase::Reindex()>
400339DE  jmp 0x140032ed1 <Benchmark()+7505>
400339E3  cmp eax,0x7fffffff
400339E8  je 0x140033ca0 <Benchmark()+11040>
400339EE  cmp eax,0x55555553
400339F3  jg 0x140033b73 <Benchmark()+10739>
400339F9  mov r13d,eax
400339FC  sar r13d,1
400339FF  add r13d,eax
40033A02  add eax,0x1
40033A05  cmp r13d,eax
40033A08  cmovl r13d,eax
40033A0C  xor eax,eax
40033A0E  xor r9d,r9d
40033A11  movsxd r15,r13d
40033A14  shl r15,0x4
40033A18  test r13d,r13d
40033A1B  mov QWORD PTR [rsp+0xe8],r15
40033A23  jne 0x140033cc0 <Benchmark()+11072>
40033A29  add r13d,eax
40033A2C  movsxd r8,DWORD PTR [rsp+0x120]
40033A34  mov DWORD PTR [rsp+0x124],r13d
40033A3C  mov rdx,QWORD PTR [rsp+0x118]
40033A44  mov rax,r8
40033A47  shl r8,0x4
40033A4B  test rdx,rdx
40033A4E  je 0x140033a6a <Benchmark()+10474>
40033A50  mov rcx,r9
40033A53  call 0x140002d78 <memcpy>
40033A58  movsxd r8,DWORD PTR [rsp+0x120]
40033A60  mov r9,rax
40033A63  mov rax,r8
40033A66  shl r8,0x4
40033A6A  mov QWORD PTR [rsp+0x118],r9
40033A72  lea r13,[r9+r8*1]
40033A76  add eax,0x1
40033A79  mov DWORD PTR [rsp+0x120],eax
40033A80  cmp BYTE PTR [rbx+0xe],0x0
40033A84  jne 0x140033c60 <Benchmark()+10976>
40033A8A  mov eax,DWORD PTR [rbx]
40033A8C  mov DWORD PTR [r13+0x0],eax
40033A90  mov eax,DWORD PTR [rbx+0x4]
40033A93  mov DWORD PTR [r13+0x4],eax
40033A97  mov eax,DWORD PTR [rbx+0x8]
40033A9A  mov DWORD PTR [r13+0x8],eax
40033A9E  mov eax,DWORD PTR [rbx+0xc]
40033AA1  mov DWORD PTR [r13+0xc],eax
40033AA5  test r14,r14
40033AA8  je 0x1400338d6 <Benchmark()+10070>
40033AAE  mov rcx,r14
40033AB1  call 0x14003fa40 <Upp::MemoryFree(void*)>
40033AB6  jmp 0x1400338d6 <Benchmark()+10070>
40033ABB  nop DWORD PTR [rax+rax*1+0x0]
40033AC0  cmp eax,0x7fffffff
40033AC5  je 0x140033d11 <Benchmark()+11153>
40033ACB  cmp eax,0x55555553
40033AD0  jg 0x140033c70 <Benchmark()+10992>
40033AD6  mov r13d,eax
40033AD9  sar r13d,1
40033ADC  add r13d,eax
40033ADF  add eax,0x1
40033AE2  cmp r13d,eax
40033AE5  cmovl r13d,eax
40033AE9  xor eax,eax
40033AEB  xor r9d,r9d
40033AEE  movsxd r15,r13d
40033AF1  shl r15,0x2
40033AF5  test r13d,r13d
40033AF8  mov QWORD PTR [rsp+0xf0],r15
40033B00  jne 0x140033d30 <Benchmark()+11184>
40033B06  add r13d,eax
40033B09  movsxd r8,DWORD PTR [rsp+0x138]
40033B11  mov DWORD PTR [rsp+0x13c],r13d
40033B19  mov rdx,QWORD PTR [rsp+0x130]
40033B21  mov rax,r8
40033B24  shl r8,0x2
40033B28  test rdx,rdx
40033B2B  je 0x140033b47 <Benchmark()+10695>
40033B2D  mov rcx,r9
40033B30  call 0x140002d78 <memcpy>
40033B35  movsxd r8,DWORD PTR [rsp+0x138]
40033B3D  mov r9,rax
40033B40  mov rax,r8
40033B43  shl r8,0x2
40033B47  add eax,0x1
40033B4A  test r14,r14
40033B4D  mov QWORD PTR [rsp+0x130],r9
40033B55  mov DWORD PTR [rsp+0x138],eax
40033B5C  mov DWORD PTR [r9+r8*1],esi
40033B60  je 0x140033905 <Benchmark()+10117>
40033B66  mov rcx,r14
40033B69  call 0x14003fa40 <Upp::MemoryFree(void*)>
40033B6E  jmp 0x140033905 <Benchmark()+10117>
40033B73  movabs rax,0x7fffffff0
40033B7D  lea rcx,[rsp+0xe8]
40033B85  mov QWORD PTR [rsp+0xe8],rax
40033B8D  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033B92  mov r9,rax
40033B95  mov r13d,0x7fffffff
40033B9B  jmp 0x140033a2c <Benchmark()+10412>
40033BA0  mov DWORD PTR [rax],ebx
40033BA2  mov DWORD PTR [rax+0x4],ebx
40033BA5  mov DWORD PTR [r12],ebx
40033BA9  jmp 0x140032ed1 <Benchmark()+7505>
40033BAE  xchg ax,ax
40033BB0  cmp edx,0x7fffffff
40033BB6  je 0x140033d54 <Benchmark()+11220>
40033BBC  cmp edx,0x55555553
40033BC2  jg 0x140033ce4 <Benchmark()+11108>
40033BC8  mov r13d,edx
40033BCB  sar r13d,1
40033BCE  add r13d,edx
40033BD1  add edx,0x1
40033BD4  cmp r13d,edx
40033BD7  cmovl r13d,edx
40033BDB  xor eax,eax
40033BDD  xor r9d,r9d
40033BE0  movsxd r14,r13d
40033BE3  shl r14,0x3
40033BE7  test r13d,r13d
40033BEA  mov QWORD PTR [rsp+0xf8],r14
40033BF2  jne 0x140033d90 <Benchmark()+11280>
40033BF8  add r13d,eax
40033BFB  mov rdx,QWORD PTR [rsp+0x140]
40033C03  mov DWORD PTR [rsp+0x14c],r13d
40033C0B  test rdx,rdx
40033C0E  je 0x140033c27 <Benchmark()+10919>
40033C10  movsxd r8,DWORD PTR [rsp+0x148]
40033C18  mov rcx,r9
40033C1B  shl r8,0x3
40033C1F  call 0x140002d78 <memcpy>
40033C24  mov r9,rax
40033C27  mov rcx,rsi
40033C2A  mov QWORD PTR [rsp+0x140],r9
40033C32  call 0x14003fa40 <Upp::MemoryFree(void*)>
40033C37  mov rsi,QWORD PTR [rsp+0x140]
40033C3F  movsxd rax,DWORD PTR [rsp+0x148]
40033C47  jmp 0x14003394a <Benchmark()+10186>
40033C4C  nop DWORD PTR [rax+0x0]
40033C50  mov rdx,rbx
40033C53  mov rcx,r14
40033C56  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
40033C5B  jmp 0x1400338d6 <Benchmark()+10070>
40033C60  mov rdx,rbx
40033C63  mov rcx,r13
40033C66  call 0x1400f4a40 <Upp::String0::LSet(Upp::String0 const&)>
40033C6B  jmp 0x140033aa5 <Benchmark()+10533>
40033C70  movabs rax,0x1fffffffc
40033C7A  lea rcx,[rsp+0xf0]
40033C82  mov QWORD PTR [rsp+0xf0],rax
40033C8A  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033C8F  mov r9,rax
40033C92  mov r13d,0x7fffffff
40033C98  jmp 0x140033b09 <Benchmark()+10633>
40033C9D  nop DWORD PTR [rax]
40033CA0  lea rcx,[rip+0x13a369]        # 0x14016e010
40033CA7  call 0x1400b9640 <Upp::Panic(char const*)>
40033CAC  mov eax,DWORD PTR [rsp+0x124]
40033CB3  jmp 0x1400339ee <Benchmark()+10350>
40033CB8  nop DWORD PTR [rax+rax*1+0x0]
40033CC0  lea rcx,[rsp+0xe8]
40033CC8  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033CCD  mov r9,rax
40033CD0  mov rax,QWORD PTR [rsp+0xe8]
40033CD8  sub rax,r15
40033CDB  shr rax,0x4
40033CDF  jmp 0x140033a29 <Benchmark()+10409>
40033CE4  movabs rax,0x3fffffff8
40033CEE  lea rcx,[rsp+0xf8]
40033CF6  mov QWORD PTR [rsp+0xf8],rax
40033CFE  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033D03  mov r9,rax
40033D06  mov r13d,0x7fffffff
40033D0C  jmp 0x140033bfb <Benchmark()+10875>
40033D11  lea rcx,[rip+0x13a2f8]        # 0x14016e010
40033D18  call 0x1400b9640 <Upp::Panic(char const*)>
40033D1D  mov eax,DWORD PTR [rsp+0x13c]
40033D24  jmp 0x140033acb <Benchmark()+10571>
40033D29  nop DWORD PTR [rax+0x0]
40033D30  lea rcx,[rsp+0xf0]
40033D38  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033D3D  mov r9,rax
40033D40  mov rax,QWORD PTR [rsp+0xf0]
40033D48  sub rax,r15
40033D4B  shr rax,0x2
40033D4F  jmp 0x140033b06 <Benchmark()+10630>
40033D54  lea rcx,[rip+0x13a2b5]        # 0x14016e010
40033D5B  call 0x1400b9640 <Upp::Panic(char const*)>
40033D60  mov edx,DWORD PTR [rsp+0x14c]
40033D67  jmp 0x140033bbc <Benchmark()+10812>
40033D6C  nop DWORD PTR [rax+0x0]
40033D70  mov rcx,rbx
40033D73  add rbx,0x10
40033D77  call 0x1400f4ee0 <Upp::String0::LFree()>
40033D7C  cmp rsi,rbx
40033D7F  jne 0x140032f40 <Benchmark()+7616>
40033D85  jmp 0x140032f53 <Benchmark()+7635>
40033D8A  nop WORD PTR [rax+rax*1+0x0]
40033D90  lea rcx,[rsp+0xf8]
40033D98  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033D9D  mov r9,rax
40033DA0  mov rax,QWORD PTR [rsp+0xf8]
40033DA8  sub rax,r14
40033DAB  shr rax,0x3
40033DAF  jmp 0x140033bf8 <Benchmark()+10872>
40033DB4  lea rcx,[rip+0x13a255]        # 0x14016e010
40033DBB  call 0x1400b9640 <Upp::Panic(char const*)>
40033DC0  mov edx,DWORD PTR [rsp+0x124]
40033DC7  jmp 0x14003369f <Benchmark()+9503>
40033DCC  lea rcx,[rip+0x13a23d]        # 0x14016e010
40033DD3  call 0x1400b9640 <Upp::Panic(char const*)>
40033DD8  mov edx,DWORD PTR [rsp+0x13c]
40033DDF  jmp 0x140031bbc <Benchmark()+2620>
40033DE4  lea rcx,[rip+0x13a225]        # 0x14016e010
40033DEB  call 0x1400b9640 <Upp::Panic(char const*)>
40033DF0  mov edx,DWORD PTR [rsp+0x124]
40033DF7  jmp 0x140031c7c <Benchmark()+2812>
40033DFC  lea rcx,[rsp+0xb0]
40033E04  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033E09  mov r9,rax
40033E0C  mov rax,QWORD PTR [rsp+0xb0]
40033E14  sub rax,r14
40033E17  shr rax,0x3
40033E1B  jmp 0x1400336db <Benchmark()+9563>
40033E20  lea rcx,[rsp+0x70]
40033E25  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033E2A  mov r9,rax
40033E2D  mov rax,QWORD PTR [rsp+0x70]
40033E32  sub rax,r14
40033E35  shr rax,0x3
40033E39  jmp 0x140031cb5 <Benchmark()+2869>
40033E3E  lea rcx,[rsp+0x78]
40033E43  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033E48  mov r9,rax
40033E4B  mov rax,QWORD PTR [rsp+0x78]
40033E50  sub rax,QWORD PTR [rsp+0x30]
40033E55  shr rax,0x2
40033E59  jmp 0x140031bfa <Benchmark()+2682>
40033E5E  lea rcx,[rip+0x13a1ab]        # 0x14016e010
40033E65  call 0x1400b9640 <Upp::Panic(char const*)>
40033E6A  mov edx,DWORD PTR [rsp+0x124]
40033E71  jmp 0x140031813 <Benchmark()+1683>
40033E76  lea rcx,[rip+0x13a193]        # 0x14016e010
40033E7D  call 0x1400b9640 <Upp::Panic(char const*)>
40033E82  mov edx,DWORD PTR [rsp+0x124]
40033E89  jmp 0x14003143c <Benchmark()+700>
40033E8E  lea rcx,[rip+0x13a17b]        # 0x14016e010
40033E95  call 0x1400b9640 <Upp::Panic(char const*)>
40033E9A  mov edx,DWORD PTR [rsp+0x13c]
40033EA1  jmp 0x14003137a <Benchmark()+506>
40033EA6  lea rcx,[rsp+0x68]
40033EAB  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40033EB0  mov r9,rax
40033EB3  mov rax,QWORD PTR [rsp+0x68]
40033EB8  sub rax,r14
40033EBB  shr rax,0x3
40033EBF  jmp 0x140031475 <Benchmark()+757>
40033EC4  mov rcx,QWORD PTR [rsp+0x48]
40033EC9  call 0x1400d6700 <Upp::Vector<Upp::String>::Grow()>
40033ECE  movsxd rax,DWORD PTR [rsp+0x108]
40033ED6  lea edx,[rax+0x1]
40033ED9  shl rax,0x4
40033EDD  add rax,QWORD PTR [rsp+0x100]
40033EE5  test rsi,rsi
40033EE8  mov DWORD PTR [rsp+0x108],edx
40033EEF  mov edx,DWORD PTR [rsp+0x110]
40033EF6  mov DWORD PTR [rax],edx
40033EF8  mov edx,DWORD PTR [rsp+0x114]
40033EFF  mov DWORD PTR [rax+0x4],edx
40033F02  mov edx,DWORD PTR [rsp+0x118]
40033F09  mov DWORD PTR [rax+0x8],edx
40033F0C  mov edx,DWORD PTR [rsp+0x11c]
40033F13  mov DWORD PTR [rax+0xc],edx
40033F16  movaps XMMWORD PTR [rsp+0x110],xmm6
40033F1E  je 0x140031234 <Benchmark()+180>
40033F24  mov rcx,rsi
40033F27  call 0x14003fa40 <Upp::MemoryFree(void*)>
40033F2C  cmp BYTE PTR [rsp+0x11e],0x0
40033F34  je 0x140031234 <Benchmark()+180>
40033F3A  mov rcx,QWORD PTR [rsp+0x20]
40033F3F  add ebx,0x1
40033F42  call 0x1400f4ee0 <Upp::String0::LFree()>
40033F47  cmp ebx,0x1388
40033F4D  jne 0x1400311d3 <Benchmark()+83>
40033F53  jmp 0x14003123f <Benchmark()+191>
40033F58  nop DWORD PTR [rax+rax*1+0x0]
40033F60  lea rdx,[rip+0x13a0e0]        # 0x14016e047
40033F67  lea rcx,[rip+0x1829d2]        # 0x1401b6940
40033F6E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40033F73  lea rcx,[rip+0x1829a6]        # 0x1401b6920
40033F7A  call 0x140157a30 <__cxa_guard_release>
40033F7F  lea rcx,[rip+0x1247ea]        # 0x140158770 <__tcf_1()>
40033F86  call 0x140001510 <atexit>
40033F8B  jmp 0x14003156f <Benchmark()+1007>
40033F90  lea rdx,[rip+0x13a0a4]        # 0x14016e03b
40033F97  lea rcx,[rip+0x182a22]        # 0x1401b69c0
40033F9E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40033FA3  lea rcx,[rip+0x1829f6]        # 0x1401b69a0
40033FAA  call 0x140157a30 <__cxa_guard_release>
40033FAF  lea rcx,[rip+0x123d9a]        # 0x140157d50 <__tcf_0()>
40033FB6  call 0x140001510 <atexit>
40033FBB  jmp 0x140031288 <Benchmark()+264>
40033FC0  lea rdx,[rip+0x13a107]        # 0x14016e0ce
40033FC7  lea rcx,[rip+0x1824f2]        # 0x1401b64c0
40033FCE  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40033FD3  lea rcx,[rip+0x1824c6]        # 0x1401b64a0
40033FDA  call 0x140157a30 <__cxa_guard_release>
40033FDF  lea rcx,[rip+0x124a9a]        # 0x140158a80 <__tcf_10()>
40033FE6  call 0x140001510 <atexit>
40033FEB  jmp 0x140032c99 <Benchmark()+6937>
40033FF0  lea rdx,[rip+0x13a05d]        # 0x14016e054
40033FF7  lea rcx,[rip+0x1828c2]        # 0x1401b68c0
40033FFE  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034003  lea rcx,[rip+0x182896]        # 0x1401b68a0
4003400A  call 0x140157a30 <__cxa_guard_release>
4003400F  lea rcx,[rip+0x124bca]        # 0x140158be0 <__tcf_2()>
40034016  call 0x140001510 <atexit>
4003401B  jmp 0x14003162f <Benchmark()+1199>
40034020  lea rdx,[rip+0x13a0b7]        # 0x14016e0de
40034027  lea rcx,[rip+0x182412]        # 0x1401b6440
4003402E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034033  lea rcx,[rip+0x1823ee]        # 0x1401b6428
4003403A  call 0x140157a30 <__cxa_guard_release>
4003403F  lea rcx,[rip+0x124a7a]        # 0x140158ac0 <__tcf_11()>
40034046  call 0x140001510 <atexit>
4003404B  jmp 0x140032dcf <Benchmark()+7247>
40034050  lea rdx,[rip+0x13a055]        # 0x14016e0ac
40034057  lea rcx,[rip+0x182562]        # 0x1401b65c0
4003405E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034063  lea rcx,[rip+0x182536]        # 0x1401b65a0
4003406A  call 0x140157a30 <__cxa_guard_release>
4003406F  lea rcx,[rip+0x125a4a]        # 0x140159ac0 <__tcf_8()>
40034076  call 0x140001510 <atexit>
4003407B  jmp 0x1400324b1 <Benchmark()+4913>
40034080  lea rdx,[rip+0x13a015]        # 0x14016e09c
40034087  lea rcx,[rip+0x1825b2]        # 0x1401b6640
4003408E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034093  lea rcx,[rip+0x182586]        # 0x1401b6620
4003409A  call 0x140157a30 <__cxa_guard_release>
4003409F  lea rcx,[rip+0x12588a]        # 0x140159930 <__tcf_7()>
400340A6  call 0x140001510 <atexit>
400340AB  jmp 0x140032384 <Benchmark()+4612>
400340B0  lea rdx,[rip+0x13a008]        # 0x14016e0bf
400340B7  lea rcx,[rip+0x182482]        # 0x1401b6540
400340BE  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
400340C3  lea rcx,[rip+0x182456]        # 0x1401b6520
400340CA  call 0x140157a30 <__cxa_guard_release>
400340CF  lea rcx,[rip+0x125b2a]        # 0x140159c00 <__tcf_9()>
400340D6  call 0x140001510 <atexit>
400340DB  jmp 0x1400326fb <Benchmark()+5499>
400340E0  lea rdx,[rip+0x139f7d]        # 0x14016e064
400340E7  lea rcx,[rip+0x182752]        # 0x1401b6840
400340EE  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
400340F3  lea rcx,[rip+0x182726]        # 0x1401b6820
400340FA  call 0x140157a30 <__cxa_guard_release>
400340FF  lea rcx,[rip+0x124c4a]        # 0x140158d50 <__tcf_3()>
40034106  call 0x140001510 <atexit>
4003410B  jmp 0x14003178d <Benchmark()+1549>
40034110  lea rdx,[rip+0x139f59]        # 0x14016e070
40034117  lea rcx,[rip+0x1826a2]        # 0x1401b67c0
4003411E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034123  lea rcx,[rip+0x182676]        # 0x1401b67a0
4003412A  call 0x140157a30 <__cxa_guard_release>
4003412F  lea rcx,[rip+0x124f6a]        # 0x1401590a0 <__tcf_4()>
40034136  call 0x140001510 <atexit>
4003413B  jmp 0x140031e61 <Benchmark()+3297>
40034140  lea rdx,[rip+0x139f36]        # 0x14016e07d
40034147  lea rcx,[rip+0x1825f2]        # 0x1401b6740
4003414E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034153  lea rcx,[rip+0x1825c6]        # 0x1401b6720
4003415A  call 0x140157a30 <__cxa_guard_release>
4003415F  lea rcx,[rip+0x1251da]        # 0x140159340 <__tcf_5()>
40034166  call 0x140001510 <atexit>
4003416B  jmp 0x140031f20 <Benchmark()+3488>
40034170  lea rdx,[rip+0x139f16]        # 0x14016e08d
40034177  lea rcx,[rip+0x182542]        # 0x1401b66c0
4003417E  call 0x140092600 <Upp::TimingInspector::TimingInspector(char const*)>
40034183  lea rcx,[rip+0x182516]        # 0x1401b66a0
4003418A  call 0x140157a30 <__cxa_guard_release>
4003418F  lea rcx,[rip+0x12568a]        # 0x140159820 <__tcf_6()>
40034196  call 0x140001510 <atexit>
4003419B  jmp 0x1400320ea <Benchmark()+3946>
400341A0  mov r8d,DWORD PTR [rsp+0x118]
400341A8  mov rdx,QWORD PTR [rsp+0x110]
400341B0  test r8d,r8d
400341B3  jne 0x140032fce <Benchmark()+7758>
400341B9  mov rcx,QWORD PTR [rsp+0x20]
400341BE  call 0x1400f4ee0 <Upp::String0::LFree()>
400341C3  mov rax,QWORD PTR [rbx+0x18]
400341C7  mov r8d,0xa0d
400341CD  mov rcx,QWORD PTR [rbx+0x28]
400341D1  mov WORD PTR [rsp+0x5e],r8w
400341D7  lea r8,[rax+0x1]
400341DB  lea rdx,[rax+0x2]
400341DF  cmp rcx,r8
400341E2  jbe 0x14003421b <Benchmark()+12443>
400341E4  mov ecx,0xa0d
400341E9  mov WORD PTR [rax],cx
400341EC  mov QWORD PTR [rbx+0x18],rdx
400341F0  mov rcx,QWORD PTR [rsp+0x48]
400341F5  lea rdx,[rcx+0x8]
400341F9  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
400341FE  nop 
400341FF  movaps xmm6,XMMWORD PTR [rsp+0x160]
40034207  add rsp,0x178
4003420E  pop rbx
4003420F  pop rsi
40034210  pop rdi
40034211  pop rbp
40034212  pop r12
40034214  pop r13
40034216  pop r14
40034218  pop r15
4003421A  ret 
4003421B  cmp rcx,rdx
4003421E  jae 0x140034236 <Benchmark()+12470>
40034220  mov rax,QWORD PTR [rbx]
40034223  lea rdx,[rsp+0x5e]
40034228  mov r8d,0x2
4003422E  mov rcx,rbx
40034231  call QWORD PTR [rax+0x18]
40034234  jmp 0x1400341f0 <Benchmark()+12400>
40034236  mov edx,0xa0d
4003423B  mov WORD PTR [rax],dx
4003423E  add QWORD PTR [rbx+0x18],0x2
40034243  jmp 0x1400341f0 <Benchmark()+12400>
40034245  mov r8,rsi
40034248  call 0x140002d78 <memcpy>
4003424D  add QWORD PTR [rbx+0x18],rsi
40034251  jmp 0x140032fec <Benchmark()+7788>
40034256  mov rcx,QWORD PTR [rsp+0x28]
4003425B  call 0x140075800 <Upp::MemoryAllocSz(unsigned long long&)>
40034260  mov r9,rax
40034263  mov rax,QWORD PTR [rsp+0x60]
40034268  sub rax,r12
4003426B  shr rax,0x2
4003426F  jmp 0x1400313ad <Benchmark()+557>
40034274  cmp BYTE PTR [r14+0xe],0x0
40034279  mov rbx,rax
4003427C  je 0x14003429b <Benchmark()+12571>
4003427E  mov rcx,r14
40034281  call 0x1400f4ee0 <Upp::String0::LFree()>
40034286  jmp 0x14003429b <Benchmark()+12571>
40034288  cmp BYTE PTR [r12+0xe],0x0
4003428E  mov rbx,rax
40034291  je 0x14003429b <Benchmark()+12571>
40034293  mov rcx,r12
40034296  call 0x1400f4ee0 <Upp::String0::LFree()>
4003429B  mov rax,QWORD PTR [rsp+0x38]
400342A0  lea rcx,[rip+0x182319]        # 0x1401b65c0
400342A7  mov edx,DWORD PTR [rsp+0x40]
400342AB  mov edi,DWORD PTR [rax]
400342AD  lea r8d,[rdi-0x1]
400342B1  mov DWORD PTR [rsp+0x28],edi
400342B5  mov DWORD PTR [rax],r8d
400342B8  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
400342BD  mov rdi,QWORD PTR [rsp+0x20]
400342C2  lea rcx,[rdi+0x20]
400342C6  lea rdx,[rdi+0x28]
400342CA  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
400342CF  mov rcx,rdi
400342D2  call 0x140035f40 <New::HashBase::~HashBase()>
400342D7  mov rcx,QWORD PTR [rsp+0x48]
400342DC  lea rdx,[rcx+0x8]
400342E0  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
400342E5  mov rcx,rbx
400342E8  call 0x140002740 <_Unwind_Resume>
400342ED  cmp BYTE PTR [r12+0xe],0x0
400342F3  mov rbx,rax
400342F6  jne 0x14003432e <Benchmark()+12718>
400342F8  mov eax,DWORD PTR [r14]
400342FB  lea rcx,[rip+0x18223e]        # 0x1401b6540
40034302  mov edx,r15d
40034305  lea r8d,[rax-0x1]
40034309  mov DWORD PTR [r14],r8d
4003430C  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034311  mov rdi,QWORD PTR [rsp+0x20]
40034316  lea rcx,[rdi+0x18]
4003431A  call 0x14010a320 <Upp::HashBase::~HashBase()>
4003431F  lea rdx,[rdi+0x10]
40034323  lea rcx,[rdi+0x8]
40034327  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
4003432C  jmp 0x1400342d7 <Benchmark()+12631>
4003432E  mov rcx,r12
40034331  call 0x1400f4ee0 <Upp::String0::LFree()>
40034336  jmp 0x1400342f8 <Benchmark()+12664>
40034338  cmp BYTE PTR [rsp+0x11e],0x0
40034340  mov rbx,rax
40034343  je 0x1400342d7 <Benchmark()+12631>
40034345  mov rcx,QWORD PTR [rsp+0x20]
4003434A  call 0x1400f4ee0 <Upp::String0::LFree()>
4003434F  jmp 0x1400342d7 <Benchmark()+12631>
40034351  cmp BYTE PTR [r13+0xe],0x0
40034356  mov rbx,rax
40034359  je 0x140034363 <Benchmark()+12771>
4003435B  mov rcx,r13
4003435E  call 0x1400f4ee0 <Upp::String0::LFree()>
40034363  mov rax,QWORD PTR [rsp+0x30]
40034368  lea rcx,[rip+0x1820d1]        # 0x1401b6440
4003436F  mov edx,DWORD PTR [rsp+0x28]
40034373  mov edi,DWORD PTR [rax]
40034375  lea r8d,[rdi-0x1]
40034379  mov DWORD PTR [rsp+0x30],edi
4003437D  mov DWORD PTR [rax],r8d
40034380  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034385  jmp 0x140034311 <Benchmark()+12689>
40034387  mov rbx,rax
4003438A  mov rcx,QWORD PTR [rsp+0x20]
4003438F  call 0x140035660 <New::Index<int>::~Index()>
40034394  jmp 0x1400342d7 <Benchmark()+12631>
40034399  mov rbx,rax
4003439C  jmp 0x1400342d7 <Benchmark()+12631>
400343A1  lea rcx,[rip+0x1824f8]        # 0x1401b68a0
400343A8  mov rbx,rax
400343AB  call 0x1401578d0 <__cxa_guard_abort>
400343B0  jmp 0x14003438a <Benchmark()+12810>
400343B2  lea rcx,[rip+0x1820e7]        # 0x1401b64a0
400343B9  mov rbx,rax
400343BC  call 0x1401578d0 <__cxa_guard_abort>
400343C1  jmp 0x140034311 <Benchmark()+12689>
400343C6  lea rcx,[rip+0x1825d3]        # 0x1401b69a0
400343CD  mov rbx,rax
400343D0  call 0x1401578d0 <__cxa_guard_abort>
400343D5  jmp 0x14003438a <Benchmark()+12810>
400343D7  lea rcx,[rip+0x182542]        # 0x1401b6920
400343DE  mov rbx,rax
400343E1  call 0x1401578d0 <__cxa_guard_abort>
400343E6  jmp 0x14003438a <Benchmark()+12810>
400343E8  cmp BYTE PTR [rdi+0xe],0x0
400343EC  mov rbx,rax
400343EF  je 0x1400342f8 <Benchmark()+12664>
400343F5  mov rcx,rdi
400343F8  call 0x1400f4ee0 <Upp::String0::LFree()>
400343FD  jmp 0x1400342f8 <Benchmark()+12664>
40034402  mov rbx,rax
40034405  jmp 0x14003429b <Benchmark()+12571>
4003440A  lea rcx,[rip+0x18222f]        # 0x1401b6640
40034411  mov rbx,rax
40034414  mov eax,DWORD PTR [r13+0x0]
40034418  mov edx,r14d
4003441B  lea r8d,[rax-0x1]
4003441F  mov DWORD PTR [r13+0x0],r8d
40034423  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034428  jmp 0x1400342bd <Benchmark()+12605>
4003442D  mov rbx,rax
40034430  jmp 0x1400342f8 <Benchmark()+12664>
40034435  mov rbx,rax
40034438  jmp 0x140034311 <Benchmark()+12689>
4003443D  lea rcx,[rip+0x1821dc]        # 0x1401b6620
40034444  mov rbx,rax
40034447  call 0x1401578d0 <__cxa_guard_abort>
4003444C  jmp 0x1400342bd <Benchmark()+12605>
40034451  lea rcx,[rip+0x182148]        # 0x1401b65a0
40034458  mov rbx,rax
4003445B  call 0x1401578d0 <__cxa_guard_abort>
40034460  jmp 0x1400342bd <Benchmark()+12605>
40034465  lea rcx,[rip+0x181fbc]        # 0x1401b6428
4003446C  mov rbx,rax
4003446F  call 0x1401578d0 <__cxa_guard_abort>
40034474  jmp 0x140034311 <Benchmark()+12689>
40034479  cmp BYTE PTR [r14+0xe],0x0
4003447E  mov rbx,rax
40034481  je 0x140034363 <Benchmark()+12771>
40034487  mov rcx,r14
4003448A  call 0x1400f4ee0 <Upp::String0::LFree()>
4003448F  jmp 0x140034363 <Benchmark()+12771>
40034494  mov rbx,rax
40034497  jmp 0x140034363 <Benchmark()+12771>
4003449C  lea rcx,[rip+0x18201d]        # 0x1401b64c0
400344A3  mov rbx,rax
400344A6  mov eax,DWORD PTR [r14]
400344A9  mov edx,r15d
400344AC  lea r8d,[rax-0x1]
400344B0  mov DWORD PTR [r14],r8d
400344B3  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
400344B8  jmp 0x140034311 <Benchmark()+12689>
400344BD  cmp BYTE PTR [r12+0xe],0x0
400344C3  mov rbx,rax
400344C6  je 0x14003429b <Benchmark()+12571>
400344CC  mov rcx,r12
400344CF  call 0x1400f4ee0 <Upp::String0::LFree()>
400344D4  jmp 0x14003429b <Benchmark()+12571>
400344D9  cmp BYTE PTR [r12+0xe],0x0
400344DF  mov rbx,rax
400344E2  je 0x14003429b <Benchmark()+12571>
400344E8  mov rcx,r12
400344EB  call 0x1400f4ee0 <Upp::String0::LFree()>
400344F0  jmp 0x14003429b <Benchmark()+12571>
400344F5  lea rcx,[rip+0x182224]        # 0x1401b6720
400344FC  mov rbx,rax
400344FF  call 0x1401578d0 <__cxa_guard_abort>
40034504  mov rcx,QWORD PTR [rsp+0x20]
40034509  add rcx,0x18
4003450D  call 0x14010a320 <Upp::HashBase::~HashBase()>
40034512  mov rcx,QWORD PTR [rsp+0x118]
4003451A  test rcx,rcx
4003451D  je 0x1400342d7 <Benchmark()+12631>
40034523  call 0x14003fa40 <Upp::MemoryFree(void*)>
40034528  jmp 0x1400342d7 <Benchmark()+12631>
4003452D  lea rcx,[rip+0x18226c]        # 0x1401b67a0
40034534  mov rbx,rax
40034537  call 0x1401578d0 <__cxa_guard_abort>
4003453C  jmp 0x140034504 <Benchmark()+13188>
4003453E  lea rcx,[rip+0x1822db]        # 0x1401b6820
40034545  mov rbx,rax
40034548  call 0x1401578d0 <__cxa_guard_abort>
4003454D  jmp 0x140034504 <Benchmark()+13188>
4003454F  lea rcx,[rip+0x181fca]        # 0x1401b6520
40034556  mov rbx,rax
40034559  call 0x1401578d0 <__cxa_guard_abort>
4003455E  jmp 0x140034311 <Benchmark()+12689>
40034563  lea rcx,[rip+0x182136]        # 0x1401b66a0
4003456A  mov rbx,rax
4003456D  call 0x1401578d0 <__cxa_guard_abort>
40034572  jmp 0x1400342bd <Benchmark()+12605>
40034577  mov edx,DWORD PTR [rsp+0x30]
4003457B  lea rcx,[rip+0x18243e]        # 0x1401b69c0
40034582  mov rbx,rax
40034585  mov eax,DWORD PTR [r15]
40034588  lea r8d,[rax-0x1]
4003458C  mov DWORD PTR [r15],r8d
4003458F  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034594  jmp 0x14003438a <Benchmark()+12810>
40034599  mov rcx,QWORD PTR [rsp+0x118]
400345A1  mov rbx,rax
400345A4  test rcx,rcx
400345A7  je 0x1400342d7 <Benchmark()+12631>
400345AD  call 0x14003fa40 <Upp::MemoryFree(void*)>
400345B2  jmp 0x1400342d7 <Benchmark()+12631>
400345B7  mov edx,DWORD PTR [rsp+0x40]
400345BB  lea rcx,[rip+0x1822fe]        # 0x1401b68c0
400345C2  mov rbx,rax
400345C5  mov rax,QWORD PTR [rsp+0x38]
400345CA  mov edi,DWORD PTR [rax]
400345CC  lea r8d,[rdi-0x1]
400345D0  mov DWORD PTR [rsp+0x28],edi
400345D4  mov DWORD PTR [rax],r8d
400345D7  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
400345DC  jmp 0x14003438a <Benchmark()+12810>
400345E1  mov rbx,rax
400345E4  mov rax,QWORD PTR [rsp+0x20]
400345E9  lea rdx,[rax+0x10]
400345ED  lea rcx,[rax+0x8]
400345F1  call 0x1400d6580 <Upp::Vector<Upp::String>::Free()>
400345F6  jmp 0x1400342d7 <Benchmark()+12631>
400345FB  cmp BYTE PTR [rbx+0xe],0x0
400345FF  mov rsi,rax
40034602  je 0x14003460c <Benchmark()+13452>
40034604  mov rcx,rbx
40034607  call 0x1400f4ee0 <Upp::String0::LFree()>
4003460C  mov rbx,rsi
4003460F  mov eax,DWORD PTR [r15]
40034612  lea rcx,[rip+0x1820a7]        # 0x1401b66c0
40034619  mov edx,DWORD PTR [rsp+0x28]
4003461D  lea r8d,[rax-0x1]
40034621  mov DWORD PTR [r15],r8d
40034624  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034629  jmp 0x1400342bd <Benchmark()+12605>
4003462E  cmp BYTE PTR [rbp+0xe],0x0
40034632  mov rbx,rax
40034635  je 0x14003460f <Benchmark()+13455>
40034637  mov rcx,rbp
4003463A  call 0x1400f4ee0 <Upp::String0::LFree()>
4003463F  jmp 0x14003460f <Benchmark()+13455>
40034641  mov edx,DWORD PTR [rsp+0x28]
40034645  lea rcx,[rip+0x1820f4]        # 0x1401b6740
4003464C  mov rbx,rax
4003464F  mov rax,QWORD PTR [rsp+0x30]
40034654  mov edi,DWORD PTR [rax]
40034656  lea r8d,[rdi-0x1]
4003465A  mov DWORD PTR [rsp+0x30],edi
4003465E  mov DWORD PTR [rax],r8d
40034661  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034666  jmp 0x140034504 <Benchmark()+13188>
4003466B  lea rcx,[rip+0x1821ce]        # 0x1401b6840
40034672  mov rbx,rax
40034675  mov eax,DWORD PTR [r12]
40034679  mov edx,r14d
4003467C  lea r8d,[rax-0x1]
40034680  mov DWORD PTR [r12],r8d
40034684  call 0x140091480 <Upp::TimingInspector::Add(unsigned long, int)>
40034689  jmp 0x140034504 <Benchmark()+13188>
4003468E  mov rbx,rax
40034691  jmp 0x140034504 <Benchmark()+13188>
40034696  cmp BYTE PTR [rsp+0x11e],0x0
4003469E  mov rbx,rax
400346A1  je 0x1400342d7 <Benchmark()+12631>
400346A7  mov rcx,QWORD PTR [rsp+0x20]
400346AC  call 0x1400f4ee0 <Upp::String0::LFree()>
400346B1  jmp 0x1400342d7 <Benchmark()+12631>
400346B6  mov rbx,rax
400346B9  jmp 0x14003460f <Benchmark()+13455>
400346BE  mov rbx,rax
400346C1  jmp 0x1400342bd <Benchmark()+12605>
